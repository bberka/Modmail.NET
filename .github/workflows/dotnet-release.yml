name: Create Release on Push to Master

on:
  push:
    branches:
      - master

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to get all tags

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0' # Replace with your .NET version

      - name: Check if global.json Exists
        id: check_global_json
        run: |
          if [ -f "./global.json" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "global.json exists."
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "global.json does not exist."
          fi

      - name: Get Version from global.json
        id: get_version
        if: steps.check_global_json.outputs.exists == 'true'
        run: |
          VERSION=$(jq -r .sdk.version ./global.json 2>/dev/null)
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from global.json"
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"

      - name: Get Version from csproj
        id: get_version_csproj
        if: steps.check_global_json.outputs.exists != 'true'
        run: |
          PROJECT_FILE="./src/Modmail.NET.Web.Blazor/Modmail.NET.Web.Blazor.csproj"
          VERSION=$(grep -oP '<Version>\K[^<]+' "$PROJECT_FILE" 2>/dev/null)
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from .csproj"
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"

      - name: Check if Tag Exists
        id: check_tag
        run: |
          TAG="v${{ env.VERSION }}"
          if git show-ref --quiet "refs/tags/$TAG"; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "Tag $TAG already exists."
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "Tag $TAG does not exist."
          fi

      - name: Create Tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
          git push origin --tags

      - name: Build
        run: dotnet build --configuration Release

      - name: Publish
        run: dotnet publish -c Release -o ./publish
    
      - name: Determine Prerelease
        id: determine_prerelease
        run: |
          if [[ "${{ env.VERSION }}" == *"-"* ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate Release Notes
        id: generate_release_notes
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { Octokit } = require("@octokit/rest");

            const octokit = new Octokit({
              auth: process.env.GITHUB_TOKEN
            });

            const response = await octokit.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ env.VERSION }}"
            });

            core.setOutput('release_notes', response.data.body);

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ env.VERSION }}"
          name: "Release v${{ env.VERSION }}"
          body: ${{ steps.generate_release_notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ steps.determine_prerelease.outputs.is_prerelease == 'true' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          skipIfReleaseExists: true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: publish
          path: ./publish
          retention-days: 7
