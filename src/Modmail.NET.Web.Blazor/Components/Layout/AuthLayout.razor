@using Modmail.NET.Common.Static
@using Modmail.NET.Features.Teams.Queries
@using Modmail.NET.Web.Blazor.Components.Layout.Shared
@using Modmail.NET.Web.Blazor.Components.Pages.Auth.Shared
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ISender Sender
@attribute [AuthorizeTeam]
<RadzenComponents @rendermode="InteractiveServer"></RadzenComponents>

<RadzenLayout>
  <RadzenHeader>
    <RadzenRow>
      <RadzenColumn Size="5">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Normal"
                     AlignItems="AlignItems.Center" Gap="0">
          <RadzenSidebarToggle Click="@(() => _sidebarExpanded = !_sidebarExpanded)"/>
          <RadzenLabel Text="Modmail.NET"/>
        </RadzenStack>
      </RadzenColumn>
      <RadzenColumn Size="7">
        <RadzenStack Wrap="FlexWrap.NoWrap" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End"
                     AlignItems="AlignItems.Center" Gap="0">
          <RadzenButton Text="@Lang.Account.Translate()" class="rz-mx-2 rz-mx-lg-4 rz-mt-2"
                        Icon="person"
                        Click="ShowAccountDialog">
          </RadzenButton>
        </RadzenStack>
      </RadzenColumn>
    </RadzenRow>


  </RadzenHeader>
  <RadzenSidebar @bind-Expanded="@_sidebarExpanded">
    <RadzenPanelMenu>
      <RadzenPanelMenuItem Text="@Lang.Dashboard.Translate()" Icon="home" Path="/dashboard"/>
      @if (_canAccessAnalytics) {
        <RadzenPanelMenuItem Text="@Lang.Analytics.Translate()" Icon="analytics" Path="/analytics"/>
      }
      <RadzenPanelMenuItem Text="@Lang.Tags.Translate()" Icon="label" Path="/tags"/>
      <RadzenPanelMenuItem Text="@Lang.Blacklist.Translate()" Icon="block" Path="/blacklist"/>
      <RadzenPanelMenuItem Text="@Lang.Users.Translate()" Icon="group" Path="/users"/>
      <RadzenPanelMenuItem Text="@Lang.Ticket.Translate()" Icon="confirmation_number">
        <RadzenPanelMenuItem Text="@Lang.Tickets.Translate()" Icon="local_activity" Path="/tickets"/>
        @if (_canViewTicketFeedbacks) {
          <RadzenPanelMenuItem Text="@Lang.Feedbacks.Translate()" Icon="reviews" Path="/feedback"/>
        }
        <RadzenPanelMenuItem Text="@Lang.Types.Translate()" Icon="stacks" Path="/ticket-types"/>
      </RadzenPanelMenuItem>

      @if (_canAccessTeams) {
        <RadzenPanelMenuItem Text="@Lang.PanelAccess.Translate()" Icon="security">
          <RadzenPanelMenuItem Text="@Lang.Permissions.Translate()" Icon="lock_open" Path="/permissions"/>
          <RadzenPanelMenuItem Text="@Lang.Teams.Translate()" Icon="manage_accounts" Path="/teams"/>
        </RadzenPanelMenuItem>
      }



      @if (_canAccessOptions || _canAccessHangfire) {
        <RadzenPanelMenuItem Text="@Lang.Advanced.Translate()" Icon="tune">

          @if (_canAccessOptions) {
            <RadzenPanelMenuItem Text="@Lang.Options.Translate()" Icon="settings" Path="/options"/>
          }
          @if (_canAccessHangfire) {
            <RadzenPanelMenuItem Text="@Lang.Hangfire.Translate()" Icon="grid_view" Path="/hangfire"/>
          }
        </RadzenPanelMenuItem>
      }

    </RadzenPanelMenu>
  </RadzenSidebar>
  <RadzenBody>
    @Body
  </RadzenBody>
  <AppFooter></AppFooter>
</RadzenLayout>


<AppError></AppError>

@code {

  bool _sidebarExpanded = true;

  [CascadingParameter]
  public required Task<AuthenticationState> AuthContext { get; set; }

  private bool _isAuth;
  private bool _canAccessHangfire;
  private bool _canAccessOptions;
  private bool _canAccessAnalytics;
  private bool _canViewTicketFeedbacks;
  private bool _canAccessTeams;

  protected override async Task OnInitializedAsync() {
    var state = await AuthContext;
    _isAuth = state.User.Identity?.IsAuthenticated == true;
    if (!_isAuth) {
      NavigationManager.NavigateTo("/", true);
      return;
    }

    var userId = state.User.GetUserId();

    _canAccessHangfire = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageHangfire));
    _canAccessOptions = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageOptions));
    _canAccessTeams = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageAccessPermissions));
    _canAccessAnalytics = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ViewAnalytics));
    _canViewTicketFeedbacks = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ViewTicketFeedbacks));
  }

  private async Task ShowAccountDialog() {
    await DialogService.OpenAsync(Lang.Account.Translate(),
                                  _ =>
                                    @<AccountDialogComponent></AccountDialogComponent>,
                                  new DialogOptions {
                                    Width = "450px",
                                    CloseDialogOnOverlayClick = true
                                  });
  }

}