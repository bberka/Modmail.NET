@using Modmail.NET.Common.Static
@using Modmail.NET.Features.Permission.Queries
@using Modmail.NET.Web.Blazor.Components.Layout.Shared
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ISender Sender
@attribute [AuthorizeTeam]
<RadzenComponents @rendermode="InteractiveServer"></RadzenComponents>

<RadzenLayout>
  <RadzenHeader>
    <RadzenRow>
      <RadzenColumn Size="5">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Normal"
                     AlignItems="AlignItems.Center" Gap="0">
          <RadzenSidebarToggle Click="@(() => _sidebarExpanded = !_sidebarExpanded)"/>
          <RadzenLabel Text="Modmail.NET"/>
        </RadzenStack>
      </RadzenColumn>
      <RadzenColumn Size="7">
        <RadzenStack Wrap="FlexWrap.NoWrap" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End"
                     AlignItems="AlignItems.Center" Gap="0">
          <RadzenButton Text="Account" class="rz-mx-2 rz-mx-lg-4 rz-mt-2"
                        Icon="person"
                        Click="ShowAccountDialog">
          </RadzenButton>
        </RadzenStack>
      </RadzenColumn>
    </RadzenRow>


  </RadzenHeader>
  <RadzenSidebar @bind-Expanded="@_sidebarExpanded">
    <RadzenPanelMenu>
      <RadzenPanelMenuItem Text="Dashboard" Icon="home" Path="/dashboard"/>

      @* <RadzenPanelMenuItem Text="Analytics" Icon="analytics" Path="/analytics"/> *@

      @if (_hasAccessTickets) {
        <RadzenPanelMenuItem Text="Tickets" Icon="local_activity" Path="/tickets"/>
      }
      <RadzenPanelMenuItem Text="Feedbacks" Icon="reviews" Path="/feedback"/>

      <RadzenPanelMenuItem Text="Tags" Icon="label" Path="/tags"/>


      @if (_hasAccessBlacklist) {
        <RadzenPanelMenuItem Text="Blacklist" Icon="block" Path="/blacklist"/>
      }
      @if (_hasAccessTicketTypes) {
        <RadzenPanelMenuItem Text="Ticket Types" Icon="stacks" Path="/ticket-types"/>
      }

      @if (_hasAccessTeams) {
        @* <RadzenPanelMenuItem Text="Permissions" Icon="security" Path="/permissions"/> *@

        <RadzenPanelMenuItem Text="Teams" Icon="group" Path="/teams"/>
      }
      @if (_isOwner) {
        <RadzenPanelMenuItem Text="Options" Icon="settings" Path="/options"/>
      }
      @if (_hasAccessHangfire) {
        <RadzenPanelMenuItem Text="Hangfire" Icon="grid_view" Path="/hangfire"/>
      }
    </RadzenPanelMenu>
    @* <div class="rz-p-4"> *@
    @*   Sidebar *@
    @* </div> *@
  </RadzenSidebar>
  <RadzenBody>
    @Body
  </RadzenBody>
  <AppFooter></AppFooter>
</RadzenLayout>


<AppError></AppError>

@code {

  bool _sidebarExpanded = true;

  [CascadingParameter]
  public Task<AuthenticationState> AuthContext { get; set; }

  private bool _isAuth;
  private bool _hasAccessTickets;
  private bool _hasAccessTicketTypes;
  private bool _isOwner;
  private bool _hasAccessHangfire;
  private bool _hasAccessTeams;
  private bool _hasAccessBlacklist;

  protected override async Task OnInitializedAsync() {
    var state = await AuthContext;
    _isAuth = state.User.Identity?.IsAuthenticated == true;
    if (!_isAuth) {
      NavigationManager.NavigateTo("/", true);
      return;
    }

    var userId = state.User.GetUserId();
    _hasAccessTickets = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageTickets));
    _hasAccessTicketTypes = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageTicketTypes));
    _hasAccessBlacklist = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageBlacklist));
    _hasAccessHangfire = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageHangfire));
    _hasAccessTeams = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageTeams));
    _isOwner = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.Owner));
  }

  private async Task ShowAccountDialog() {
    await DialogService.OpenAsync("Account",
                                  _ =>
                                    @<div>
                                      <AccountDialog></AccountDialog>
                                    </div>,
                                  new DialogOptions {
                                    Width = "450px",
                                    CloseDialogOnOverlayClick = true
                                  });
  }

}