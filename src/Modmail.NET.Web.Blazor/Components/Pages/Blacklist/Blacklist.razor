@page "/blacklist"
@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Common.Exceptions
@using Modmail.NET.Common.Static
@using Modmail.NET.Features.Blacklist.Commands
@using Modmail.NET.Features.Teams.Queries
@using Modmail.NET.Web.Blazor.Components.Pages.Blacklist.Shared
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject ISender Sender
@attribute [AuthorizeTeam]

@code {

  [CascadingParameter]
  public Task<AuthenticationState> AuthContext { get; set; } = null!;

  private IQueryable<Database.Entities.Blacklist>? _data;

  private bool _isLoading;
  private bool _hasPermissionToManage;

  private async Task ReloadDataAsync(LoadDataArgs? args = null) {
    _isLoading = true;


    var dbContext = await DbContextFactory.CreateDbContextAsync();
    var query = dbContext.Blacklists
                         .AsNoTracking()
                         .Include(x => x.User)
                         .OrderByDescending(x => x.RegisterDateUtc)
                         .AsQueryable();

    query = query.ApplyDataGridFilter(args);

    _count = await query.CountAsync();

    _data = args is not null
              ? query.ApplyPagination(args)
              : query.Skip(0).Take(10).AsQueryable();

    _isLoading = false;
    StateHasChanged();
  }


  protected override async Task OnInitializedAsync() {
    var state = await AuthContext;
    var userId = state.User.GetUserId();
    _hasPermissionToManage = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageBlacklist));

    await ReloadDataAsync();
  }


  private async Task LoadDataAsync(LoadDataArgs args) {
    await ReloadDataAsync(args);
  }

  private int _count;

  private async Task RemoveAsync(Database.Entities.Blacklist blacklist) {
    var dialogResult = await DialogService.Confirm(Lang.BlockUserConfirmation.Translate(),
                                                   options: new ConfirmOptions {
                                                     OkButtonText = Lang.Yes.Translate(),
                                                     CancelButtonText = Lang.No.Translate(),
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true
                                                   });

    if (dialogResult == true) {
      const string logMessage = $"[{nameof(Blacklist)}]{nameof(RemoveAsync)}{{UserId}})";
      try {
        var state = await AuthContext;
        var discordUserId = state.User.GetUserId();
        await Sender.Send(new ProcessRemoveUserFromBlacklistCommand(discordUserId, blacklist.UserId));
        Log.Information(logMessage,
                        blacklist.UserId);
        NotificationService.Notify(NotificationSeverity.Success, Lang.UserUnblockedSuccessfully.Translate());
        await ReloadDataAsync();
      }
      catch (ModmailBotException ex) {
        Log.Warning(ex,
                    logMessage,
                    blacklist.UserId);
        ex.NotifyException(NotificationService);
      }
      catch (Exception ex) {
        Log.Fatal(ex,
                  logMessage,
                  blacklist.UserId);
        ex.NotifyException(NotificationService);
      }
    }
  }

  private async Task ShowAddDialogAsync() {
    var result = await DialogService.OpenAsync("Block User", _ =>
                                                 @<AddBlacklistDialogComponent></AddBlacklistDialogComponent>,
                                               new DialogOptions {
                                                 Width = "400px"
                                               });
    if (result is true) {
      await ReloadDataAsync();
    }
  }


}


<div class="container rz-mx-auto">
  <RadzenRow>
    <RadzenColumn Size="12">
      <RadzenRow>
        <RadzenColumn Size="12">
          <RadzenText TextStyle="TextStyle.H3" class="fw-bold">
            Blacklist
          </RadzenText>
          <p>
            This page shows the list of users that are blacklisted from using the bot.
          </p>
          @* <hr class="my-4"/> *@
        </RadzenColumn>
      </RadzenRow>
      <RadzenRow RowGap="4" class="rz-mt-5">
        @if (_data is null) {
          <Loading></Loading>
        }
        else {
          <RadzenCard Style="width: 100% !important;" class="rz-shadow-7">
            <RadzenDataGrid Responsive="true" Count="_count" LoadData="LoadDataAsync" AllowColumnPicking="true"
                            AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                            FilterMode="FilterMode.SimpleWithMenu"
                            Density="Density.Default"

                            AllowGrouping="false" AllowSorting="true" PageSize="10" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" PagerPosition="PagerPosition.TopAndBottom"
                            PagerAlwaysVisible="false" GotoFirstPageOnSort="true"
                            Data="@_data" TItem="Database.Entities.Blacklist" ColumnWidth="180px"
                            LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                            IsLoading=@_isLoading>
              <HeaderTemplate>
                <RadzenRow>
                  <RadzenColumn Size="12">
                    @if (_hasPermissionToManage) {
                      <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Variant="Variant.Filled"
                                    Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                    Click="@ShowAddDialogAsync">
                        Block User
                      </RadzenButton>
                    }
                  </RadzenColumn>
                </RadzenRow>
              </HeaderTemplate>
              <Columns>
                <RadzenDataGridColumn Visible="false" Property="@nameof(Database.Entities.Blacklist.Id)"
                                      Filterable="false"
                                      Title="ID" Width="120px" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Title="User Avatar" Sortable="false" Filterable="false" Width="120px"
                                      TextAlign="TextAlign.Center">
                  <Template Context="data">
                    <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">
                      <RadzenImage class="rz-m-0 rz-p-0" Style="width: 100px; height: 100px"
                                   Path="@data.User!.AvatarUrl" AlternateText=""/>
                    </RadzenStack>
                  </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="OpenerUser.Username" Title="User" Sortable="true" Filterable="true"
                                      Width="100px" TextAlign="TextAlign.Center">
                  <Template Context="data">
                    <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">
                      <RadzenText Text="@data.User!.Username" TextAlign="TextAlign.Center"
                                  class="fw-bold"></RadzenText>
                    </RadzenStack>
                  </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Visible="true" Property="@nameof(Database.Entities.Blacklist.RegisterDateUtc)"
                                      Filterable="true" Title=@Lang.RegisterDateUtc.Translate() Width="80px"
                                      TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(Database.Entities.Blacklist.Reason)"
                                      Filterable="true"
                                      Title="Reason" Width="120px" TextAlign="TextAlign.Center"/>

                <RadzenDataGridColumn Context="data" TextAlign="TextAlign.Center" Filterable="false" Sortable="false"
                                      Title="Actions">
                  <Template Context="data">
                    @if (_hasPermissionToManage) {
                      <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="warning" Variant="Variant.Flat"
                                    Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                    Click="@(async () => await RemoveAsync(data))"
                                    MouseEnter="@(args => TooltipService.Open(args, "Remove Blacklist", new TooltipOptions { Style = "background: var(--rz-danger);" }))"

                                    @onclick:stopPropagation="true">
                      </RadzenButton>
                    }
                  </Template>
                </RadzenDataGridColumn>

              </Columns>
            </RadzenDataGrid>
          </RadzenCard>
        }

      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
</div>