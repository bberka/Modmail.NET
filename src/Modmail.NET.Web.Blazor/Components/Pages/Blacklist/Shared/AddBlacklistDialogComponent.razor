@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using Modmail.NET.Common.Exceptions
@using Modmail.NET.Database.Entities
@using Modmail.NET.Features.Blacklist.Commands
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ModmailBot Bot
@inject ISender Sender
@inject IOptions<BotConfig> Options
@attribute [AuthorizeTeam]

@code {


  [CascadingParameter]
  public required Task<AuthenticationState> AuthContext { get; set; }

  private UserInformation[] _users = [];

  private ulong _selectedUserId;

  private string _reason = string.Empty;

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    var dbContext = await DbContextFactory.CreateDbContextAsync();
    _users = await dbContext.UserInformation
                            .OrderBy(x => x.Username)
                            .GroupJoin(dbContext.Blacklists,
                                       user => user.Id,
                                       blacklist => blacklist.UserId,
                                       (user, blacklists) => new { user, blacklists })
                            .SelectMany(x => x.blacklists.DefaultIfEmpty(),
                                        (x, blacklist) => new { x.user, blacklist })
                            .Where(x => x.blacklist == null) // Only take users that are not in blacklist
                            .Select(x => x.user)
                            .GroupJoin(dbContext.TeamUsers,
                                       user => user.Id,
                                       teamUser => teamUser.UserId,
                                       (user, teamUser) => new { user, teamUser })
                            .SelectMany(x => x.teamUser.DefaultIfEmpty(),
                                        (x, teamUser) => new { x.user, teamUser })
                            .Where(x => x.teamUser == null)
                            .Select(x => x.user)
                            .Where(x => x.Id != Bot.Client.CurrentUser.Id) // Exclude bot
                            .Where(x => !Options.Value.SuperUsers.Contains(x.Id)) // Exclude bot owner
                            .ToArrayAsync();
  }

  private async Task SubmitAsync() {
    if (_selectedUserId <= 0) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please select a user.");
      return;
    }

    var dialogResult = await DialogService.Confirm("Are you sure you want to block this user?",
                                                   options: new ConfirmOptions {
                                                     OkButtonText = Lang.Yes.Translate(),
                                                     CancelButtonText = Lang.No.Translate(),
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true
                                                   });
    if (dialogResult == true) {
      const string logMessage = $"[{nameof(AddBlacklistDialogComponent)}]{nameof(SubmitAsync)}({{UserId}},{{Reason}})";
      try {
        var state = await AuthContext;
        var discordUserId = state.User.GetUserId();
        await Sender.Send(new ProcessAddUserToBlacklistCommand(discordUserId, _selectedUserId, _reason));
        NotificationService.Notify(NotificationSeverity.Success, "Success", "User blacklisted successfully.");
        Log.Information(logMessage,
                        _selectedUserId,
                        _reason);
        DialogService.Close(true);
      }
      catch (ModmailBotException ex) {
        ex.NotifyException(NotificationService);
        Log.Warning(logMessage,
                    _selectedUserId,
                    _reason);
      }
      catch (Exception ex) {
        ex.NotifyException(NotificationService);
        Log.Fatal(logMessage,
                  _selectedUserId,
                  _reason);
      }
    }
  }

  // private sealed record AddBlackListModel(ulong UserId);

}


<RadzenRow>
  <RadzenColumn>
    <RadzenRow class="rz-mb-4">
      <RadzenAlert AllowClose="false" Size="AlertSize.Small" AlertStyle="AlertStyle.Warning" Variant="Variant.Flat"
                   Shade="Shade.Lighter">
        Blocking user will force close active tickets if user has any.
      </RadzenAlert>
      <RadzenAlert AllowClose="false" Size="AlertSize.Small" AlertStyle="AlertStyle.Info" Variant="Variant.Flat"
                   Shade="Shade.Lighter">
        You can only see users that are interacted with the bot.
      </RadzenAlert>
    </RadzenRow>
    <RadzenRow class="rz-my-4">
      <RadzenDropDown Style="width: 100%;" TValue="ulong" @bind-Value="_selectedUserId" Placeholder="Select user"
                      AllowFiltering="true" class="w-100"
                      Data="@(_users)" TextProperty="@nameof(UserInformation.Username)"
                      ValueProperty="@nameof(UserInformation.Id)"/>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Block Reason" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="block-reason" @bind-Value="@_reason" class="w-100"/>
      </RadzenFormField>
    </RadzenRow>


    <RadzenRow class="rz-mt-4">
      <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="Block User"
                    Click="SubmitAsync"/>
    </RadzenRow>


  </RadzenColumn>
</RadzenRow>