@page "/ticket-types"
@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Web.Blazor.Components.Shared.TicketType
@using Serilog
@inject IDbContextFactory<ModmailDbContext> dbContextFactory
@inject DialogService dialogService
@inject NotificationService notificationService
@inject TooltipService tooltipService

@code {
  private IQueryable<TicketType>? data;

  bool isLoading;
  private int count;

  async Task ShowLoading() {
    isLoading = true;

    await Task.Yield();

    isLoading = false;
  }

  private async Task reloadDataAsync(LoadDataArgs? args = null) {
    await ShowLoading();

    var dbContext = await dbContextFactory.CreateDbContextAsync();
    var query = dbContext.TicketTypes
                         .OrderByDescending(x => x.RegisterDateUtc)
                         .AsQueryable();

    if (args is not null) {
      query = query.ApplyDataGridFilter(args);
    }

    count = await query.CountAsync();


    data = args is not null
             ? query.ApplyPagination(args)
             : query.Skip(0).Take(10).AsQueryable();

    StateHasChanged();
  }


  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();

    await reloadDataAsync();
  }


  private async Task LoadDataAsync(LoadDataArgs args) {
    await reloadDataAsync(args);
  }


  private async Task RemoveAsync(TicketType ticketType) {
    var dialogResult = await dialogService.Confirm("By deleting this ticket type, all tickets associated with it will lose ticket type data. This action cannot be undone.",
                                                   "Are you sure you want to delete this ticket type ?",
                                                   new ConfirmOptions {
                                                     OkButtonText = "Yes",
                                                     CancelButtonText = "No",
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true
                                                   });


    if (dialogResult == true) {
      const string logMessage = $"[{nameof(TicketTypes)}]{nameof(RemoveAsync)}({{@ticketType}})";
      try {
        await ticketType.ProcessRemoveAsync();
        Log.Information(logMessage,
                        ticketType);
        notificationService.Notify(NotificationSeverity.Success,
                                   "Ticket Type deleted successfully");

        await reloadDataAsync();
      }
      catch (BotExceptionBase ex) {
        Log.Warning(ex,
                    logMessage,
                    ticketType);
        ex.NotifyException(notificationService);
      }
      catch (Exception ex) {
        Log.Fatal(ex,
                  logMessage,
                  ticketType);
        ex.NotifyException(notificationService);
      }
    }
  }

  private async Task ShowAddDialog() {
    var dialog = await dialogService.OpenAsync("Create Ticket Type",
                                               ds =>
                                                 @<div>
                                                   <CreateOrUpdateTicketTypeDialog></CreateOrUpdateTicketTypeDialog>
                                                 </div>,
                                               new DialogOptions {
                                                 Width = "450px"
                                               });
    if (dialog is true) {
      await reloadDataAsync();
    }
  }

  private async Task ShowEditDialog(TicketType ticketType) {
    var dialog = await dialogService.OpenAsync("Edit Ticket Type",
                                               ds =>
                                                 @<CreateOrUpdateTicketTypeDialog
                                                   TicketType="ticketType"></CreateOrUpdateTicketTypeDialog>,
                                               new DialogOptions {
                                                 Width = "450px"
                                               });
    if (dialog is true) {
      await reloadDataAsync();
    }
  }

  @* *@
  @* private async Task ShowDetailsDialog(GuildTeam guildTeam) { *@
  @*   var dialog = await dialogService.OpenAsync("Team Details", *@
  @*                                              ds => *@
  @*                                                @<TeamDetailsDialog Team="guildTeam"></TeamDetailsDialog>, *@
  @*                                              new DialogOptions() { }); *@
  @*   if (dialog is true) { *@
  @*     await reloadDataAsync(); *@
  @*   } *@
  @* } *@

}


<div class="rz-mx-auto">
  <RadzenRow>
    <RadzenColumn Size="12">
      <RadzenRow>
        <RadzenColumn Size="12">
          <RadzenText TextStyle="TextStyle.H3" class="fw-bold">
            Ticket Types
          </RadzenText>
          @* <hr class="my-4"/> *@
          <p>
            Ticket types is used to categorize tickets, and can be used to filter tickets based on their type.
          </p>
        </RadzenColumn>
      </RadzenRow>
      <RadzenRow RowGap="4" class="rz-mt-5">
        @if (data is null) {
          <Loading></Loading>
        }
        else {
          <RadzenCard Style="width: 100% !important;" class="rz-shadow-7">
            <RadzenDataGrid Responsive="true" Count="count" LoadData="LoadDataAsync" AllowColumnPicking="true"
                            Density="Density.Default"
                            
                            AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                            FilterMode="FilterMode.SimpleWithMenu"
                            AllowGrouping="false" AllowSorting="true" PageSize="10" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" PagerPosition="PagerPosition.TopAndBottom"
                            PagerAlwaysVisible="false" GotoFirstPageOnSort="true"
                            Data="@data" TItem="TicketType" ColumnWidth="150px"
                            LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                            IsLoading=@isLoading Sort="@ShowLoading" Page="@ShowLoading" Group="@ShowLoading"
                            Filter="@ShowLoading">
              <HeaderTemplate>
                <RadzenRow>
                  <RadzenColumn Size="12">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary"
                                  Icon="add"
                                  Variant="Variant.Filled"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@ShowAddDialog">
                      Create Ticket Type
                    </RadzenButton>
                  </RadzenColumn>
                </RadzenRow>
              </HeaderTemplate>
              <Columns>
                <RadzenDataGridColumn Visible="false" Property="@nameof(TicketType.Id)" Filterable="false" Title="ID"
                                      TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketType.Name)" Filterable="true" Title="Name"
                                      TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketType.Emoji)" Width="90px" Filterable="true"
                                      Title="Emoji" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketType.Description)" Filterable="true"
                                      Title="Description" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketType.Order)" Width="120px"
                                      Filterable="true" Title="Order" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketType.EmbedMessageTitle)" Width="120px"
                                      Filterable="true" Title="Embed Message Title" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketType.EmbedMessageContent)" Width="120px"
                                      Filterable="true" Title="Embed Message Content" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="false" Property="@nameof(TicketType.RegisterDateUtc)" Width="120px"
                                      Filterable="true" Title="Register Date UTC" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="false" Property="@nameof(TicketType.UpdateDateUtc)" Width="120px"
                                      Filterable="true" Title="Update Date UTC" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Context="data" TextAlign="TextAlign.Center" Filterable="false" Sortable="false"
                                      Title="Actions">
                  <Template Context="data">
                    @* <RadzenButton ButtonStyle="ButtonStyle.Primary" *@
                    @*               Icon="info" *@
                    @*               Variant="Variant.Flat" *@
                    @*               Shade="Shade.Lighter" *@
                    @*               Size="ButtonSize.Medium" *@
                    @*               class="rz-my-1 rz-ms-1" *@
                    @*               Click="@(async () => await ShowDetailsDialog(data))" *@
                    @*               MouseEnter="@(args => tooltipService.Open(args, "Details", new TooltipOptions() { Style = "background: var(--rz-primary);" }))" *@
                    @*               @onclick:stopPropagation="true"> *@
                    @* </RadzenButton> *@
                    @* *@
                    <RadzenButton ButtonStyle="ButtonStyle.Info"
                                  Icon="edit"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@(async () => await ShowEditDialog(data))"
                                  MouseEnter="@(args => tooltipService.Open(args, "Edit Ticket Type", new TooltipOptions { Style = "background: var(--rz-info);" }))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                  Icon="delete"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  MouseEnter="@(args => tooltipService.Open(args, "Delete Ticket Type", new TooltipOptions { Style = "background: var(--rz-danger);" }))"
                                  Click="@(async () => await RemoveAsync(data))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                  </Template>
                </RadzenDataGridColumn>

              </Columns>
            </RadzenDataGrid>
          </RadzenCard>
        }

      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
</div>