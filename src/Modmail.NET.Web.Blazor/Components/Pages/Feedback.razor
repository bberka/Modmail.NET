@page "/feedback"
@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Features.Ticket.Mappers
@using Modmail.NET.Features.Ticket.Models
@inject IDbContextFactory<ModmailDbContext> DbContextFactory

@* @attribute [AuthorizeTeam(nameof(AuthPolicy.ViewFeedbacks))] *@

@code {

//TODO: Feedback page authentication
  [CascadingParameter]
  public Task<AuthenticationState> AuthContext { get; set; }

  private IQueryable<TicketFeedbackDto> _data;

  bool _isLoading;

  async Task ShowLoading() {
    _isLoading = true;

    await Task.Yield();

    _isLoading = false;
  }


  private async Task ReloadDataAsync(LoadDataArgs args = null) {
    await ShowLoading();

    var dbContext = await DbContextFactory.CreateDbContextAsync();
    var query = dbContext.Tickets
                         .AsNoTracking()
                         .OrderByDescending(x => x.ClosedDateUtc)
                         .Where(x => x.FeedbackStar.HasValue)
                         .AsQueryable()
                         .ProjectToFeedbackDto();


    if (args is not null) {
      query = query.ApplyDataGridFilter(args);
    }

    _count = await query.CountAsync();

    _data = args is not null
              ? query.ApplyPagination(args)
              : query.Skip(0).Take(10).AsQueryable();

    StateHasChanged();
  }


  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    await ReloadDataAsync();
  }


  private async Task LoadDataAsync(LoadDataArgs args) {
    await ReloadDataAsync(args);
  }

  private int _count;


}


<div class="container-xxl rz-mx-auto">
  <RadzenRow>
    <RadzenColumn Size="12">
      <RadzenRow>
        <RadzenColumn Size="12">
          <RadzenText TextStyle="TextStyle.H3" class="fw-bold">
            Feedbacks
          </RadzenText>
          <p>
            This page shows the list of feedbacks given by users after ticket is closed.
          </p>
          @* <hr class="my-4"/> *@
        </RadzenColumn>
      </RadzenRow>
      <RadzenRow RowGap="4" class="rz-mt-5">
        @if (_data is null) {
          <Loading></Loading>
        }
        else {
          <RadzenCard Style="width: 100% !important;" class="rz-shadow-7">
            <RadzenDataGrid Responsive="true" Count="_count" LoadData="LoadDataAsync" AllowColumnPicking="true"
                            AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                            FilterMode="FilterMode.SimpleWithMenu"
                            Density="Density.Default"
                            AllowGrouping="false" AllowSorting="true" PageSize="10" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" PagerPosition="PagerPosition.TopAndBottom"
                            PagerAlwaysVisible="false" GotoFirstPageOnSort="true"
                            Data="@_data" TItem="TicketFeedbackDto" ColumnWidth="180px"
                            LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                            IsLoading=@_isLoading Sort="@ShowLoading" Page="@ShowLoading" Group="@ShowLoading"
                            Filter="@ShowLoading">
              <Columns>
                <RadzenDataGridColumn Visible="false" Property="@nameof(TicketFeedbackDto.Id)" Filterable="false"
                                      Title="ID" Width="120px" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Title="User Avatar" Sortable="false" Filterable="false" Width="120px"
                                      TextAlign="TextAlign.Center">
                  <Template Context="data">
                    <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">
                      <RadzenImage class="rz-m-0 rz-p-0" Style="width: 100px; height: 100px"
                                   Path="@data.OpenerUser!.AvatarUrl" AlternateText=""/>
                    </RadzenStack>
                  </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="OpenerUser.Username" Title="User" Sortable="true" Filterable="true"
                                      Width="100px" TextAlign="TextAlign.Center">
                  <Template Context="data">
                    <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">
                      <RadzenText Text="@data.OpenerUser!.Username" TextAlign="TextAlign.Center"
                                  class="fw-bold"></RadzenText>
                    </RadzenStack>
                  </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketFeedbackDto.ClosedDateUtc)"
                                      Filterable="true" Title="Ticket Close UTC" Width="120px"
                                      TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketFeedbackDto.FeedbackStar)"
                                      Filterable="true"
                                      Title="Star" Width="80px" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketFeedbackDto.FeedbackMessage)"
                                      Filterable="true"
                                      Title="Message" Width="300px" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(TicketFeedbackDto.Id)" Filterable="true"
                                      Title="Ticket Id" Width="200px" TextAlign="TextAlign.Center"/>

              </Columns>
            </RadzenDataGrid>
          </RadzenCard>
        }

      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
</div>