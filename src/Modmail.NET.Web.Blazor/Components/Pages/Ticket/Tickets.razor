@page "/tickets"
@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Common.Exceptions
@using Modmail.NET.Features.Ticket.Commands
@using Modmail.NET.Features.Ticket.Mappers
@using Modmail.NET.Features.Ticket.Models
@using Modmail.NET.Web.Blazor.Components.Pages.Ticket.Shared
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@using Modmail.NET.Web.Blazor.Static
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject TooltipService TooltipService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager Navi
@inject ISender Sender
@attribute [AuthorizeTeam]

@code {

  [CascadingParameter]
  public required Task<AuthenticationState> AuthContext { get; set; }

  private IQueryable<TicketDto>? _data;

  bool _isLoading;


  private async Task ReloadDataAsync(LoadDataArgs? args = null) {
    _isLoading = true;

    var dbContext = await DbContextFactory.CreateDbContextAsync();
    var query = dbContext.Tickets
                         .AsNoTracking()
                         .Include(x => x.OpenerUser)
                         .Include(x => x.CloserUser)
                         .Include(x => x.TicketType)
                         .OrderByDescending(x => x.RegisterDateUtc)
                         .ProjectToDto()
                         .AsQueryable();

    switch (_filterTicketType) {
      case TicketFilterType.All:
        break;
      case TicketFilterType.Active:
        query = query.Where(x => !x.ClosedDateUtc.HasValue);
        break;
      case TicketFilterType.Closed:
        query = query.Where(x => x.ClosedDateUtc.HasValue);
        break;
      default:
        throw new ArgumentOutOfRangeException();
    }

    query = query.ApplyDataGridFilter(args);

    _count = await query.CountAsync();

    _data = args is not null
              ? query.ApplyPagination(args)
              : query.Skip(0).Take(10).AsQueryable();

    _isLoading = false;
    StateHasChanged();
  }


  protected override async Task OnInitializedAsync() {
    var state = await AuthContext;
    _ = state.User.GetUserId();
    await ReloadDataAsync();
  }


  private async Task LoadDataAsync(LoadDataArgs args) {
    await ReloadDataAsync(args);
  }

  private int _count;

  private readonly string? _forceCloseReason = null;

  private async Task ForceCloseAsync(TicketDto ticketDto) {
    //TODO: Add reason textbox with custom component dialog
    var dialogResult = await DialogService.Confirm(Lang.TicketForceCloseWarning.Translate(),
                                                   options: new ConfirmOptions {
                                                     OkButtonText = Lang.Yes.Translate(),
                                                     CancelButtonText = Lang.No.Translate()
                                                   });
    if (dialogResult == true) {
      const string logMessage = $"[{nameof(Tickets)}]{nameof(ForceCloseAsync)}({{reason}})";
      try {
        await Sender.Send(new ProcessCloseTicketCommand(ticketDto.Id));
        Log.Information(logMessage, _forceCloseReason);
        NotificationService.Notify(NotificationSeverity.Success, Lang.Success.Translate(), Lang.TicketClosedSuccessfully.Translate());
        await ReloadDataAsync();
      }
      catch (ModmailBotException ex) {
        ex.NotifyException(NotificationService);
        Log.Warning(ex, logMessage, _forceCloseReason);
      }
      catch (Exception ex) {
        ex.NotifyException(NotificationService);
        Log.Fatal(ex, logMessage, _forceCloseReason);
      }
    }
  }

  private TicketFilterType _filterTicketType = TicketFilterType.All;

  private void ShowTranscript(TicketDto ticketDto) {
    Navi.NavigateTo("transcript/" + ticketDto.Id);
  }


  private async Task ShowNotes(TicketDto ticketDto) {
    _ = await DialogService.OpenAsync(Lang.TicketNotes.Translate(),
                                      _ =>
                                        @<TicketNotesDialogComponent
                                          TicketId="ticketDto.Id"></TicketNotesDialogComponent>,
                                      new DialogOptions {
                                        Width = "900px",
                                        CloseDialogOnEsc = true,
                                        CloseDialogOnOverlayClick = true
                                      });
  }

  private async Task ShowFeedback(TicketDto ticketDto) {
    _ = await DialogService.OpenAsync(Lang.TicketFeedback.Translate(),
                                      _ =>
                                        @<div class="rz-mx-auto">
                                          <RadzenRow>
                                            <RadzenColumn Size="12">
                                              <RadzenRow class="rz-mb-4">
                                                @for (var i = 0; i < ticketDto.FeedbackStar; i++) {
                                                  <RadzenIcon Icon="stars" IconStyle="IconStyle.Warning"></RadzenIcon>
                                                }
                                                @for (var i = 0; i < 5 - ticketDto.FeedbackStar; i++) {
                                                  <RadzenIcon Icon="stars" IconStyle="IconStyle.Base"></RadzenIcon>
                                                }
                                              </RadzenRow>
                                              <RadzenRow class="rz-mt-4">
                                                <RadzenMarkdown>
                                                  @if (string.IsNullOrEmpty(ticketDto.FeedbackMessage)) {
                                                    @Lang.NoFeedbackProvided.Translate()
                                                  }
                                                  else {
                                                    @ticketDto.FeedbackMessage
                                                  }
                                                </RadzenMarkdown>
                                              </RadzenRow>
                                            </RadzenColumn>
                                          </RadzenRow>
                                        </div>,
                                      new DialogOptions {
                                        Width = "500px",
                                        CloseDialogOnEsc = true,
                                        CloseDialogOnOverlayClick = true
                                      });
  }


}

<div class="container-xxl rz-mx-auto">
  <RadzenRow>
    <RadzenColumn Size="12">
      <RadzenRow>
        <RadzenColumn Size="12">
          <RadzenText TextStyle="TextStyle.H3" class="fw-bold">
            @Lang.Tickets.Translate()
          </RadzenText>
        </RadzenColumn>
      </RadzenRow>
      <RadzenRow RowGap="4" class="rz-mt-5">
        @if (_data is null) {
          <Loading></Loading>
        }
        else {
          <RadzenCard Style="width: 100% !important;" class="rz-shadow-7">
            <RadzenDataGrid Responsive="true" Count="_count" LoadData="LoadDataAsync" AllowColumnPicking="true"
                            Density="Density.Default"
                            AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                            FilterMode="FilterMode.SimpleWithMenu"
                            AllowGrouping="false" AllowSorting="true" PageSize="10" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" PagerPosition="PagerPosition.TopAndBottom"
                            PagerAlwaysVisible="false" GotoFirstPageOnSort="true"
                            Data="@_data" TItem="TicketDto" ColumnWidth="180px"
                            LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                            IsLoading=@_isLoading>
              <HeaderTemplate>
                <RadzenDropDown Style="user-select: none"
                                Multiple="false"
                                Name="filter-ticket-type"
                                @bind-Value="@_filterTicketType"
                                Data="Enum.GetValues<TicketFilterType>()"
                                Change="() => ReloadDataAsync()"
                                class="w-100"
                                TValue="TicketFilterType"
                                Placeholder=@Lang.FilterTickets.Translate()
                                AllowFiltering="false"/>
              </HeaderTemplate>
              <Columns>
                <RadzenDataGridColumn Visible="false" Property="@nameof(TicketDto.Id)" Filterable="false"
                                      Title=@Lang.Id.Translate()
                                      TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Title=@Lang.OpenerUserAvatar.Translate() Sortable="false" Filterable="false"
                                      TextAlign="TextAlign.Center">
                  <Template Context="data">
                    <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">
                      <RadzenImage class="rz-m-0 rz-p-0" Style="width: 100px; height: 100px"
                                   Path="@data.OpenerUser!.AvatarUrl" AlternateText=""/>
                    </RadzenStack>
                  </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="OpenerUser.Username" Title=@Lang.OpenerUser.Translate() Sortable="true"
                                      SortProperty="@nameof(TicketDto.OpenerUser)"
                                      Filterable="true" TextAlign="TextAlign.Center">
                  <Template Context="data">
                    <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">
                      <RadzenText Text="@data.OpenerUser!.Username" TextAlign="TextAlign.Center"
                                  class="fw-bold"></RadzenText>
                    </RadzenStack>
                  </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="@Lang.CloserUserAvatar.Translate()" Sortable="false" Filterable="false"
                                      TextAlign="TextAlign.Center">
                  <Template Context="data">
                    <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">
                      <RadzenImage Style="width: 100px; height: 100px;" Path="@(data.CloserUser != null
                                                                                  ? data.CloserUser.AvatarUrl
                                                                                  : "#")"
                                   AlternateText=""/>
                    </RadzenStack>
                  </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Title="@Lang.CloserUser.Translate()" Sortable="true" Filterable="true"
                                      Property="CloserUser.Username"
                                      TextAlign="TextAlign.Center">
                  <Template Context="data">
                    <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">
                      <RadzenText Text="@data.CloserUser?.Username" TextAlign="TextAlign.Center"
                                  class="fw-bold"></RadzenText>
                    </RadzenStack>
                  </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Property="@nameof(TicketDto.RegisterDateUtc)"
                                      Title=@Lang.RegisterDateUtc.Translate()/>
                <RadzenDataGridColumn Visible="false" Property="@nameof(TicketDto.LastMessageDateUtc)"
                                      Title="Last Message Date UTC"/>
                <RadzenDataGridColumn Property="@nameof(TicketDto.ClosedDateUtc)" Title="Close Date UTC"/>
                <RadzenDataGridColumn Property="@nameof(TicketDto.CloseReason)" Title="Close Reason"/>
                <RadzenDataGridColumn Title=@Lang.TicketType.Translate() Sortable="true" Filterable="true"
                                      Property="TicketType.Name"
                                      TextAlign="TextAlign.Center">
                  <Template Context="data">
                    <RadzenStack AlignItems="AlignItems.Center" class="rz-mx-auto rz-my-12">
                      <RadzenText Text="@data.TicketType?.Name" TextAlign="TextAlign.Center"
                                  class="fw-bold"></RadzenText>
                    </RadzenStack>
                  </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Context="data" TextAlign="TextAlign.Center" Filterable="false" Sortable="false"
                                      Title="Actions">
                  <Template Context="data">
                    @if (!data.ClosedDateUtc.HasValue) {
                      <RadzenButton
                        ButtonStyle="ButtonStyle.Danger"
                        Icon="close"
                        Variant="Variant.Flat"
                        Shade="Shade.Lighter"
                        Size="ButtonSize.Medium"
                        class="rz-my-1 rz-ms-1"
                        Click="@(async () => await ForceCloseAsync(data))"
                        MouseEnter="@(args => TooltipService.Open(args, "Force Close Ticket", new TooltipOptions { Style = "background: var(--rz-danger);" }))"
                        @onclick:stopPropagation="true">
                      </RadzenButton>
                    }

                    <RadzenButton
                      ButtonStyle="ButtonStyle.Info"
                      Icon="forum"
                      Variant="Variant.Flat"
                      Shade="Shade.Lighter"
                      Size="ButtonSize.Medium"
                      class="rz-my-1 rz-ms-1"
                      Click="@(() => ShowTranscript(data))"
                      MouseEnter="@(args => TooltipService.Open(args, "Transcript"))"
                      @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton
                      ButtonStyle="ButtonStyle.Info"
                      Icon="description"
                      Variant="Variant.Flat"
                      Shade="Shade.Lighter"
                      Size="ButtonSize.Medium"
                      class="rz-my-1 rz-ms-1"
                      Click="@(async () => await ShowNotes(data))"
                      MouseEnter="@(args => TooltipService.Open(args, "Show Notes"))"
                      @onclick:stopPropagation="true">
                    </RadzenButton>
                    @if (data.FeedbackStar.HasValue) {
                      <RadzenButton
                        ButtonStyle="ButtonStyle.Info"
                        Icon="reviews"
                        Variant="Variant.Flat"
                        Shade="Shade.Lighter"
                        Size="ButtonSize.Medium"
                        class="rz-my-1 rz-ms-1"
                        Click="@(async () => await ShowFeedback(data))"
                        MouseEnter="@(args => TooltipService.Open(args, "Show Feedback"))"
                        @onclick:stopPropagation="true">
                      </RadzenButton>
                    }
                    @* <RadzenButton *@
                    @*   ButtonStyle="ButtonStyle.Success" *@
                    @*   Icon="add_notes" *@
                    @*   Variant="Variant.Flat" *@
                    @*   Shade="Shade.Lighter" *@
                    @*   Size="ButtonSize.Medium" *@
                    @*   class="rz-my-1 rz-ms-1" *@
                    @*   Click="@(async () => await ShowAddNoteDialog(data))" *@
                    @*   MouseEnter="@(args => tooltipService.Open(args, "Add Note", new TooltipOptions() { Style = "background: var(--rz-success);" }))" *@
                    @*   @onclick:stopPropagation="true"> *@
                    @* </RadzenButton> *@
                  </Template>
                </RadzenDataGridColumn>
              </Columns>
            </RadzenDataGrid>
          </RadzenCard>
        }

      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
</div>