@using Modmail.NET.Common.Exceptions
@using Modmail.NET.Features.Ticket.Commands
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@using Serilog
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ISender Sender
@attribute [AuthorizeTeam]

@code {


  [CascadingParameter]
  public required Task<AuthenticationState> AuthContext { get; set; }

  [Parameter]
  public required Guid TicketId { get; set; }

  private string? _reason;


  private async Task SubmitAsync() {
    var dialogResult = await DialogService.Confirm(Lang.TicketForceCloseWarning.Translate(),
                                                   options: new ConfirmOptions {
                                                     OkButtonText = Lang.Yes.Translate(),
                                                     CancelButtonText = Lang.No.Translate(),
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true
                                                   });
    if (dialogResult == true) {
      const string logMessage = $"[{nameof(CloseTicketDialogComponent)}]{nameof(SubmitAsync)}({{UserId}},{{Reason}})";
      var state = await AuthContext;
      var discordUserId = state.User.GetUserId();
      try {
        await Sender.Send(new ProcessCloseTicketCommand(discordUserId, TicketId, _reason));
        NotificationService.Notify(NotificationSeverity.Success, Lang.Success.Translate(), Lang.TicketClosedSuccessfully.Translate());
        Log.Information(logMessage,
                        discordUserId,
                        _reason);
        DialogService.Close(true);
      }
      catch (ModmailBotException ex) {
        ex.NotifyException(NotificationService);
        Log.Warning(logMessage,
                    discordUserId,
                    _reason);
      }
      catch (Exception ex) {
        ex.NotifyException(NotificationService);
        Log.Fatal(logMessage,
                  discordUserId,
                  _reason);
      }
    }
  }

}


<RadzenRow>
  <RadzenColumn>
    <RadzenRow class="rz-mb-4">
      <RadzenAlert AllowClose="false" Size="AlertSize.Small" AlertStyle="AlertStyle.Warning" Variant="Variant.Flat"
                   Shade="Shade.Lighter">
        @Lang.ThisActionCanNotBeUndone.Translate()
      </RadzenAlert>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="@Lang.Reason.Translate()" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="@Lang.Reason.Translate()" @bind-Value="@_reason" class="w-100"/>
      </RadzenFormField>
    </RadzenRow>


    <RadzenRow class="rz-mt-4">
      <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary"
                    Text="@Lang.CloseTicket.Translate()"
                    Click="SubmitAsync"/>
    </RadzenRow>


  </RadzenColumn>
</RadzenRow>