@page "/dashboard"
@using Modmail.NET.Common.Static
@using Modmail.NET.Common.Utils
@using Modmail.NET.Features.Metric.Models
@using Modmail.NET.Features.Metric.Queries
@using Modmail.NET.Features.Server.Queries
@using Modmail.NET.Features.Teams.Queries
@using Modmail.NET.Features.Ticket.Services
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ModmailBot Bot
@inject TicketMessageQueue TicketMessageQueue
@inject IServiceScopeFactory ScopeFactory
@inject ISender Sender
@attribute [AuthorizeTeam]

@code {


  [CascadingParameter]
  public required Task<AuthenticationState> AuthContext { get; set; }

  private bool _canManageStartStop;
  private MetricDto _metricDto = MetricDto.Default;

  protected override async Task OnInitializedAsync() {
    var state = await AuthContext;
    var userId = state.User.GetUserId();
    var isSetup = await Sender.Send(new CheckSetupQuery());
    if (!isSetup) {
      var isSuperUser = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.SuperUser));
      if (isSuperUser) {
        NavigationManager.NavigateTo("/setup");
        return;
      }

      NavigationManager.NavigateTo("/result/" + Lang.ServerNotSetup);
      return;
    }

    _canManageStartStop = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageDiscordClient));

    var metric = await Sender.Send(new GetLatestMetricQuery());
    if (metric is not null) {
      _metricDto = metric;
    }
  }


  private async Task StartBotAsync() {
    if (!_canManageStartStop) {
      return;
    }

    var dialogResult = await DialogService.Confirm(Lang.StartBotConfirmation.Translate(),
                                                   options: new ConfirmOptions {
                                                     CloseDialogOnEsc = true,
                                                     CloseDialogOnOverlayClick = true,
                                                     OkButtonText = Lang.Yes.Translate(),
                                                     CancelButtonText = Lang.No.Translate()
                                                   });
    if (dialogResult == true) {
      await Bot.StartAsync();
      StateHasChanged();
      NotificationService.Notify(NotificationSeverity.Success, Lang.BotStartedSuccessfully.Translate());
    }
  }

  private async Task StopBotAsync() {
    if (!_canManageStartStop) {
      return;
    }

    var dialogResult = await DialogService.Confirm(Lang.StopBotConfirmation.Translate(),
                                                   options: new ConfirmOptions {
                                                     CloseDialogOnEsc = true,
                                                     CloseDialogOnOverlayClick = true,
                                                     OkButtonText = Lang.Yes.Translate(),
                                                     CancelButtonText = Lang.No.Translate()
                                                   });
    if (dialogResult == true) {
      await Bot.StopAsync();
      StateHasChanged();
      NotificationService.Notify(NotificationSeverity.Success, Lang.BotStoppedSuccessfully.Translate());
    }
  }

  private async Task RestartBotAsync() {
    var dialogResult = await DialogService.Confirm(Lang.RestartBotConfirmation.Translate(),
                                                   options: new ConfirmOptions {
                                                     CloseDialogOnEsc = true,
                                                     CloseDialogOnOverlayClick = true,
                                                     OkButtonText = Lang.Yes.Translate(),
                                                     CancelButtonText = Lang.No.Translate()
                                                   });
    if (dialogResult == true) {
      await Bot.StopAsync();
      await Bot.StartAsync();
      StateHasChanged();
      NotificationService.Notify(NotificationSeverity.Success, Lang.BotRestartedSuccessfully.Translate());
    }
  }

}

<div class="container">
  <RadzenRow>
    <RadzenColumn>
      <RadzenRow>
        <RadzenColumn Size="12">
          <RadzenText TextStyle="TextStyle.H3" class="fw-bold">
            @Lang.Dashboard.Translate()
          </RadzenText>
          @* <hr class="my-4"/> *@

        </RadzenColumn>
      </RadzenRow>
    </RadzenColumn>
    <RadzenColumn Size="12">
      <RadzenCard class="shadow-7">
        <RadzenRow>
          <RadzenColumn Size="12">
            <RadzenText TextStyle="TextStyle.DisplayH4">
              @Lang.BotStatus.Translate()
              @if (Bot.Connected) {
                <span class="rz-color-success"> @($" {Lang.Connected.Translate()}")</span>
              }
              else {
                <span class="rz-color-danger"> @($" {Lang.Disconnected.Translate()}")</span>
              }
            </RadzenText>
          </RadzenColumn>
        </RadzenRow>
        @if (_canManageStartStop) {
          <RadzenRow class="rz-mb-2 rz-mt-5">
            <RadzenColumn Size="12">
              @if (Bot.Connected) {
                <RadzenButton ButtonStyle="ButtonStyle.Danger"
                              Click="@StopBotAsync">@Lang.StopBot.Translate()</RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Warning"
                              Click="@RestartBotAsync">@Lang.RestartBot.Translate()</RadzenButton>
              }
              else {
                <RadzenButton ButtonStyle="ButtonStyle.Primary"
                              Click="@StartBotAsync">@Lang.StartBot.Translate()</RadzenButton>
              }
            </RadzenColumn>
          </RadzenRow>
        }

      </RadzenCard>

      @if (_metricDto is not null) {
        <RadzenRow RowGap="4" class="rz-mt-5">
          <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard class="rz-shadow-7">
              <RadzenText TextStyle="TextStyle.H3">
                @(UtilReadable.ConvertNumberToReadableString(_metricDto.ActiveTickets))
              </RadzenText>
              <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-color-primary">
                @Lang.ActiveTickets.Translate()
              </RadzenText>
            </RadzenCard>
          </RadzenColumn>
          <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard class="rz-shadow-7">
              <RadzenText TextStyle="TextStyle.H3">
                @(UtilReadable.ConvertNumberToReadableString(_metricDto.ClosedTickets))
              </RadzenText>
              <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-color-primary">
                @Lang.ClosedTickets.Translate()
              </RadzenText>
            </RadzenCard>
          </RadzenColumn>
          <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard class="rz-shadow-7">
              <RadzenText TextStyle="TextStyle.H3">
                @(UtilReadable.ConvertNumberToReadableString(_metricDto.TotalMessages))
              </RadzenText>
              <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-color-primary">
                @Lang.TotalMessages.Translate()
              </RadzenText>
            </RadzenCard>
          </RadzenColumn>
          <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard class="rz-shadow-7">
              <RadzenText TextStyle="TextStyle.H3">
                @(UtilReadable.ConvertNumberToReadableString(_metricDto.Teams))
              </RadzenText>
              <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-color-primary">
                @Lang.Teams.Translate()
              </RadzenText>
            </RadzenCard>
          </RadzenColumn>

          <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard class="rz-shadow-7">
              <RadzenText TextStyle="TextStyle.H3">
                @(UtilReadable.ConvertNumberToReadableString(_metricDto.TeamUserCount))
              </RadzenText>
              <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-color-primary">
                @Lang.TeamMembers.Translate()
              </RadzenText>
            </RadzenCard>
          </RadzenColumn>


          <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard class="rz-shadow-7">
              <RadzenText TextStyle="TextStyle.H3">
                @(UtilReadable.ConvertNumberToReadableString(_metricDto.Blacklist))
              </RadzenText>
              <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-color-primary">
                @Lang.Blacklists.Translate()
              </RadzenText>
            </RadzenCard>
          </RadzenColumn>


          <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard class="rz-shadow-7">
              <RadzenText TextStyle="TextStyle.H3">
                @(UtilReadable.ConvertNumberToReadableString(_metricDto.TagCount))
              </RadzenText>
              <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-color-primary">
                @Lang.Tags.Translate()
              </RadzenText>
            </RadzenCard>
          </RadzenColumn>

          <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard class="rz-shadow-7">
              <RadzenText TextStyle="TextStyle.H3">
                @(UtilReadable.ConvertNumberToReadableString(_metricDto.TicketTypes))
              </RadzenText>
              <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-color-primary">
                @Lang.TicketTypes.Translate()
              </RadzenText>
            </RadzenCard>
          </RadzenColumn>

          <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard class="rz-shadow-7">
              <RadzenText TextStyle="TextStyle.H3">
                @(UtilReadable.ConvertNumberToReadableString(TicketMessageQueue.GetChannelCount()))
              </RadzenText>
              <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-color-primary">
                @Lang.ProcessingMessageQueues.Translate()
              </RadzenText>
            </RadzenCard>
          </RadzenColumn>

        </RadzenRow>
      }

    </RadzenColumn>
  </RadzenRow>
</div>