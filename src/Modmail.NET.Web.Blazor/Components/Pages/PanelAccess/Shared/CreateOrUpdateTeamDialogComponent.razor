@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using Modmail.NET.Common.Exceptions
@using Modmail.NET.Database.Entities
@using Modmail.NET.Features.Teams.Commands
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ModmailBot Bot
@inject ISender Sender
@inject IOptions<BotConfig> Options
@attribute [AuthorizeTeam]

@code {


    private UserInformation[]? _users = null;

  [CascadingParameter]
  public required Task<AuthenticationState> AuthContext { get; set; }

  [Parameter]
  public required Team? Team { get; set; }

  private bool _pingOnNewTicket = false;
  private bool _pingOnTicketMessage = false;
    private string? _teamName;

  private bool IsUpdate => Team is not null;

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    var dbContext = await DbContextFactory.CreateDbContextAsync();

    _users = await dbContext.UserInformation
                            .OrderBy(x => x.Username)
                            .Where(x => x.Id != Bot.Client.CurrentUser.Id && Options.Value.SuperUsers.Contains(x.Id))
                            .ToArrayAsync();

    _teamName = IsUpdate
                  ? Team?.Name
                  : null;
    _pingOnNewTicket = IsUpdate && Team!.PingOnNewTicket;
    _pingOnTicketMessage = IsUpdate && (Team?.PingOnNewMessage ?? false);

    var state = await AuthContext;
    _ = state.User.GetUserId();
  }

  private async Task SubmitAsync() {
    if (string.IsNullOrEmpty(_teamName)) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please enter a team name.");
      return;
    }

    var dialogResult = await DialogService.Confirm(IsUpdate
                                                     ? "Are you sure you want to update this team ?"
                                                     : "Are you sure you want to create new team ?",
                                                   options: new ConfirmOptions {
                                                           OkButtonText = Lang.Yes.Translate(),
                                                           CancelButtonText = Lang.No.Translate(),
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true
                                                   });
    if (dialogResult == true) {
        const string logMessage = $"[{nameof(CreateOrUpdateTeamDialogComponent)}]{nameof(SubmitAsync)}({{TeamName}})";
      var state = await AuthContext;
      var userId = state.User.GetUserId();

      try {
        if (IsUpdate && Team is not null) {
            await Sender.Send(new ProcessUpdateTeamCommand(userId, Team.Id, _teamName, _pingOnNewTicket, _pingOnTicketMessage));
            Log.Information(logMessage, _teamName);
          NotificationService.Notify(NotificationSeverity.Success, "Success", "Team updated successfully.");
        }
        else {
            await Sender.Send(new ProcessCreateTeamCommand(userId, _teamName, _pingOnNewTicket, _pingOnTicketMessage));
            Log.Information(logMessage, _teamName);
          NotificationService.Notify(NotificationSeverity.Success, "Success", "Team created successfully.");
        }

        DialogService.Close(true);
      }
      catch (ModmailBotException ex) {
          Log.Warning(ex, logMessage, _teamName);
        ex.NotifyException(NotificationService);
      }
      catch (Exception ex) {
          Log.Fatal(ex, logMessage, _teamName);
        ex.NotifyException(NotificationService);
      }
    }
  }

}


@if (_users is null) {
  <Loading></Loading>
}
else {
  <RadzenRow>
    <RadzenColumn>
      <RadzenRow class="rz-my-4">
        <RadzenFormField Text="Team Name" class="w-100" Variant="Variant.Outlined">
          <RadzenTextBox Name="team-name" @bind-Value="@_teamName"/>
        </RadzenFormField>
      </RadzenRow>

      <RadzenRow class="rz-my-4">
        <RadzenSwitch Name="pingOnNewTicket" @bind-Value=@_pingOnNewTicket/>
        <RadzenLabel Component="pingOnNewTicket">
          Ping on new ticket
        </RadzenLabel>
      </RadzenRow>

      <RadzenRow class="rz-my-4">
        <RadzenSwitch Name="pingOnTicketMessage" @bind-Value=@_pingOnTicketMessage/>
        <RadzenLabel Component="pingOnTicketMessage">
          Ping on ticket message
        </RadzenLabel>

      </RadzenRow>

      <RadzenRow class="rz-my-4">
        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="@(IsUpdate
                                                                                                 ? "Update"
                                                                                                 : "Create")"
                      Click="SubmitAsync"/>
      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
}