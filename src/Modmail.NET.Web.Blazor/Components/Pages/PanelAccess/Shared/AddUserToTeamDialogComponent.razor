@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Common.Exceptions
@using Modmail.NET.Database.Entities
@using Modmail.NET.Features.Teams.Commands
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ModmailBot Bot
@inject ISender Sender
@attribute [AuthorizeTeam]

@code {

  [Parameter]
  public required Team Team { get; set; }

  [CascadingParameter]
  public required Task<AuthenticationState> AuthContext { get; set; }

  private UserInformation[]? _users;

  private ulong _selectedUserId = 0;

  protected override async Task OnInitializedAsync() {
    var dbContext = await DbContextFactory.CreateDbContextAsync();
    var teamMemberIds = dbContext.TeamUsers
                                 .Select(x => x.UserId)
                                 .ToArray();

    _users = await dbContext.UserInformation
                            .GroupJoin(dbContext.Blacklists,
                                       user => user.Id,
                                       blacklist => blacklist.UserId,
                                       (user, blacklists) => new { user, blacklists })
                            .SelectMany(x => x.blacklists.DefaultIfEmpty(),
                                        (x, blacklist) => new { x.user, blacklist })
                            .Where(x => x.blacklist == null && x.user.Id != Bot.Client.CurrentUser.Id && !teamMemberIds.Contains(x.user.Id)) // Only take users that are not in blacklist
                            .OrderBy(x => x.user.Username)
                            .Select(x => x.user)
                            .ToArrayAsync();
  }

  private async Task SubmitAsync(MouseEventArgs obj) {
    if (_selectedUserId == 0) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please select a user.");
      return;
    }

    const string logMessage = $"[{nameof(AddUserToTeamDialogComponent)}]{nameof(SubmitAsync)}({{UserId}})";

    try {
      var state = await AuthContext;
      var userId = state.User.GetUserId();

      await Sender.Send(new ProcessAddTeamUserCommand(userId, Team.Id, _selectedUserId));
      Log.Information(logMessage, _selectedUserId);
      NotificationService.Notify(NotificationSeverity.Success, "Success", "User added to team successfully.");
      DialogService.Close(true);
    }
    catch (ModmailBotException ex) {
      Log.Warning(logMessage, _selectedUserId);
      ex.NotifyException(NotificationService);
    }
    catch (Exception ex) {
      Log.Fatal(logMessage, _selectedUserId);
      ex.NotifyException(NotificationService);
    }
  }

}

@if (_users == null) {
  <Loading></Loading>
}
else {
  <RadzenRow>
    <RadzenColumn>
      <RadzenRow class="rz-my-4">
          <RadzenText TextStyle="TextStyle.Subtitle1">
              Once user is added to team, that user will have all the permissions this team is assigned.
          </RadzenText>
        <RadzenDropDown Style="user-select: none"
                        Name="user-dropdown"
                        Data="@_users" class="w-100"
                        TextProperty="@nameof(UserInformation.Username)"
                        ValueProperty="@nameof(UserInformation.Id)"
                        TValue="ulong"
                        @bind-Value="_selectedUserId"
                        Placeholder="Select User"
                        AllowFiltering="true"/>
      </RadzenRow>
      <RadzenRow class="rz-my-4">
        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="Add" Click="SubmitAsync"/>
      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
}