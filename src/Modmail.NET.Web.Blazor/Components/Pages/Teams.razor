@page "/teams"
@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Abstract
@using Modmail.NET.Extensions
@using Modmail.NET.Features.Teams
@using Modmail.NET.Static
@using Modmail.NET.Web.Blazor.Components.Shared.Teams
@using Modmail.NET.Web.Blazor.Providers
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject ISender Sender
@attribute [AuthorizeTeam(nameof(AuthPolicy.ManageTeams))]



<div class="container-xxl rz-mx-auto">
  <RadzenRow>
    <RadzenColumn Size="12">
      <RadzenRow>
        <RadzenColumn Size="12">
          <RadzenText TextStyle="TextStyle.H3" class="fw-bold">
            Teams
          </RadzenText>
          <p>
            Assign members and roles to access tickets and web panel.
          </p>
          <p>
            You must add users to teams to have access to web panel. Role members on discord will not have access to
            panel. Owner teams will always have access to web panel.
          </p>
        </RadzenColumn>
      </RadzenRow>
      <RadzenRow RowGap="4" class="rz-mt-5">
        @if (_data is null) {
          <Loading></Loading>
        }
        else {
          <RadzenCard Style="width: 100% !important;" class="rz-shadow-7">
            <RadzenDataGrid Responsive="true" Count="_count" LoadData="LoadDataAsync" AllowColumnPicking="true"
                            Density="Density.Default"
                            AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                            FilterMode="FilterMode.SimpleWithMenu"
                            AllowGrouping="false" AllowSorting="true" PageSize="10" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" PagerPosition="PagerPosition.TopAndBottom"
                            PagerAlwaysVisible="false" GotoFirstPageOnSort="true"
                            Data="@_data" TItem="GuildTeam" ColumnWidth="150px"
                            LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                            IsLoading=@_isLoading Sort="@ShowLoading" Page="@ShowLoading" Group="@ShowLoading"
                            Filter="@ShowLoading">
              <HeaderTemplate>
                <RadzenRow>
                  <RadzenColumn Size="12">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Variant="Variant.Filled"
                                  Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                  Click="@ShowAddDialog">
                      Create Team
                    </RadzenButton>
                  </RadzenColumn>
                </RadzenRow>
              </HeaderTemplate>
              <Columns>
                <RadzenDataGridColumn Visible="false" Property="@nameof(GuildTeam.Id)" Filterable="false" Title="ID"
                                      TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.Name)" Filterable="true" Title="Name"
                                      TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.IsEnabled)" Width="90px"
                                      Filterable="true" Title="Enabled" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.PermissionLevel)" Filterable="true"
                                      Title="Permission Level" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="false" Property="@nameof(GuildTeam.RegisterDateUtc)" Width="120px"
                                      Filterable="true" Title="Register Date UTC" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="false" Property="@nameof(GuildTeam.UpdateDateUtc)" Width="120px"
                                      Filterable="true" Title="Update Date UTC" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.PingOnNewTicket)" Width="120px"
                                      Filterable="true" Title="Ping On New Ticket" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.PingOnNewMessage)" Width="120px"
                                      Filterable="true" Title="Ping On New Message" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Context="data" TextAlign="TextAlign.Center" Filterable="false" Sortable="false"
                                      Title="Actions">
                  <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary"
                                  Icon="info"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@(async () => await ShowDetailsDialog(data))"
                                  MouseEnter="@(args => TooltipService.Open(args, "Details", new TooltipOptions { Style = "background: var(--rz-primary);" }))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Success"
                                  Icon="person_add"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@(async () => await ShowAddUserDialog(data))"
                                  MouseEnter="@(args => TooltipService.Open(args, "Add User", new TooltipOptions { Style = "background: var(--rz-success);" }))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Success"
                                  Icon="group_add"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@(async () => await ShowAddRoleDialog(data))"
                                  MouseEnter="@(args => TooltipService.Open(args, "Add Role", new TooltipOptions { Style = "background: var(--rz-success);" }))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Info"
                                  Icon="edit"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@(async () => await ShowEditDialog(data))"
                                  MouseEnter="@(args => TooltipService.Open(args, "Edit Team", new TooltipOptions { Style = "background: var(--rz-info);" }))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                  Icon="delete"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  MouseEnter="@(args => TooltipService.Open(args, "Delete Team", new TooltipOptions { Style = "background: var(--rz-danger);" }))"
                                  Click="@(async () => await RemoveAsync(data))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                  </Template>
                </RadzenDataGridColumn>

              </Columns>
            </RadzenDataGrid>
          </RadzenCard>
        }

      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
</div>


@code {

  [CascadingParameter]
  public Task<AuthenticationState> AuthContext { get; set; }


  private IQueryable<GuildTeam> _data;

  bool _isLoading;

  async Task ShowLoading() {
    _isLoading = true;

    await Task.Yield();

    _isLoading = false;
  }

  private async Task ReloadDataAsync(LoadDataArgs args = null) {
    await ShowLoading();

    var dbContext = await DbContextFactory.CreateDbContextAsync();
    var query = dbContext.GuildTeams
                         .AsNoTracking()
                         .OrderByDescending(x => x.RegisterDateUtc)
                         .AsQueryable();

    if (args is not null) {
      query = query.ApplyDataGridFilter(args);
    }

    _count = await query.CountAsync();


    _data = args is not null
              ? query.ApplyPagination(args)
              : query.Skip(0).Take(10).AsQueryable();

    StateHasChanged();
  }


  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();

    await ReloadDataAsync();
  }


  private async Task LoadDataAsync(LoadDataArgs args) {
    await ReloadDataAsync(args);
  }

  private int _count;

  private async Task RemoveAsync(GuildTeam team) {
    var dialogResult = await DialogService.Confirm("Are you sure you want to delete this team ?",
                                                   options: new ConfirmOptions {
                                                     OkButtonText = "Yes",
                                                     CancelButtonText = "No",
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true
                                                   });


    if (dialogResult == true) {
      const string logMessage = $"[{nameof(Teams)}]{nameof(RemoveAsync)}({{TeamName}})";
      try {
        var state = await AuthContext;
        var userId = state.User.GetUserId();

        await Sender.Send(new ProcessRemoveTeamCommand(userId, team.Id));
        Log.Information(logMessage,
                        team.Name);
        NotificationService.Notify(NotificationSeverity.Success,
                                   "Team deleted successfully");

        await ReloadDataAsync();
      }
      catch (BotExceptionBase ex) {
        Log.Warning(ex,
                    logMessage,
                    team.Name);
        ex.NotifyException(NotificationService);
      }
      catch (Exception ex) {
        Log.Fatal(ex,
                  logMessage,
                  team.Name);
        ex.NotifyException(NotificationService);
      }
    }
  }

  private async Task ShowAddDialog() {
    var dialog = await DialogService.OpenAsync("Create Team",
                                               ds =>
                                                 @<div>
                                                   <CreateOrUpdateTeamDialog></CreateOrUpdateTeamDialog>
                                                 </div>,
                                               new DialogOptions {
                                                 Width = "450px"
                                               });
    if (dialog is true) {
      await ReloadDataAsync();
    }
  }

  private async Task ShowEditDialog(GuildTeam team) {
    var dialog = await DialogService.OpenAsync("Edit Team",
                                               ds =>
                                                 @<CreateOrUpdateTeamDialog Team="team"></CreateOrUpdateTeamDialog>,
                                               new DialogOptions {
                                                 Width = "450px"
                                               });
    if (dialog is true) {
      await ReloadDataAsync();
    }
  }

  private async Task ShowAddUserDialog(GuildTeam guildTeam) {
    var dialog = await DialogService.OpenAsync("Add User to Team",
                                               ds =>
                                                 @<AddUserToTeamDialog GuildTeam="guildTeam"></AddUserToTeamDialog>,
                                               new DialogOptions {
                                                 Width = "450px"
                                               });
    if (dialog is true) {
      await ReloadDataAsync();
    }
  }

  private async Task ShowAddRoleDialog(GuildTeam guildTeam) {
    var dialog = await DialogService.OpenAsync("Add Role to Team",
                                               ds =>
                                                 @<AddRoleToTeamDialog GuildTeam="guildTeam"></AddRoleToTeamDialog>,
                                               new DialogOptions {
                                                 Width = "450px"
                                               });
    if (dialog is true) {
      await ReloadDataAsync();
    }
  }

  private async Task ShowDetailsDialog(GuildTeam guildTeam) {
    var dialog = await DialogService.OpenAsync("Team Details",
                                               ds =>
                                                 @<TeamDetailsDialog Team="guildTeam"></TeamDetailsDialog>,
                                               new DialogOptions());
    if (dialog is true) {
      await ReloadDataAsync();
    }
  }

}

