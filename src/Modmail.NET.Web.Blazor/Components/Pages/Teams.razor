@page "/teams"

@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Extensions
@using Modmail.NET.Language
@using Modmail.NET.Web.Blazor.Components.Layout.Shared
@using Modmail.NET.Web.Blazor.Components.Shared
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject DialogService DialogService
@inject  NotificationService NotificationService

@code {

  private IQueryable<GuildTeam>? data;

  bool isLoading = false;

  async Task ShowLoading() {
    isLoading = true;

    await Task.Yield();

    isLoading = false;
  }


  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();

    await ShowLoading();

    var dbContext = await DbContextFactory.CreateDbContextAsync();
    var query = dbContext.GuildTeams
                         .OrderByDescending(x => x.RegisterDateUtc)
                         .AsQueryable();

    count = query.Count();

    data = query.Skip(0).Take(10).AsQueryable();
  }


  private async Task LoadDataAsync(LoadDataArgs args) {
    var dbContext = await DbContextFactory.CreateDbContextAsync();

    var query = dbContext.GuildTeams
                         .OrderByDescending(x => x.RegisterDateUtc)
                         .AsQueryable();

    query = query.ApplyDataGridFilter(args);
    count = query.Count();
    data = query.ApplyPagination(args);
  }

  private int count = 0;

  private async Task RemoveAsync(GuildTeam team) {
    var dialogResult = await DialogService.Confirm("Are you sure you want to delete this team ?",
                                                   options: new ConfirmOptions() {
                                                     OkButtonText = "Yes",
                                                     CancelButtonText = "No",
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true,
                                                   });


    if (dialogResult == true) {
      const string logMessage = $"[{nameof(Teams)}]{nameof(RemoveAsync)}({{TeamName}})";
      try {
        await team.ProcessRemoveTeamAsync();
        Log.Information(logMessage,
                        team.Name);
        NotificationService.Notify(NotificationSeverity.Success,
                                   "Team deleted successfully");

        var dbContext = await DbContextFactory.CreateDbContextAsync();
        data = dbContext.GuildTeams
                        .OrderByDescending(x => x.RegisterDateUtc)
                        .AsQueryable()
                        .Skip(0)
                        .Take(10)
                        .AsQueryable();
      }
      catch (BotExceptionBase ex) {
        Log.Warning(ex,
                    logMessage,
                    team.Name);
        NotificationService.Notify(NotificationSeverity.Error,
                                   ex.Message);
      }
      catch (Exception ex) {
        Log.Fatal(ex,
                  logMessage,
                  team.Name);
        NotificationService.Notify(NotificationSeverity.Error,
                                   "Exception occurred, please check logs");
      }
    }
  }

  private async Task ShowAddDialog() {
    var dialog = await DialogService.OpenAsync("Create Team",
                                  ds =>
                                    @<div>
                                      <CreateTeamDialog DialogService="@ds"></CreateTeamDialog>
                                    </div>,
                                  new DialogOptions() {
                                    Width = "450px",
                                  });
    if (dialog is true) {
      await ShowLoading();
      var dbContext = await DbContextFactory.CreateDbContextAsync();
      data = dbContext.GuildTeams
                      .OrderByDescending(x => x.RegisterDateUtc)
                      .AsQueryable()
                      .Skip(0)
                      .Take(10)
                      .AsQueryable();
    }
  }


}


<div class="container-xl rz-mx-auto">
  <RadzenRow>
    <RadzenColumn Size="12">
      <RadzenRow>
        <RadzenColumn Size="12">
          <RadzenText TextStyle="TextStyle.H3" class="fw-bold">
            Teams
          </RadzenText>
          @* <hr class="my-4"/> *@
        </RadzenColumn>
      </RadzenRow>
      <RadzenRow RowGap="4" class="rz-mt-5">
        @if (data is null) {
          <Loading></Loading>
        }
        else {
          <RadzenCard Style="width: 100% !important;" class="rz-shadow-7">
            <RadzenDataGrid Responsive="true" Count="count" LoadData="LoadDataAsync" AllowColumnPicking="true" AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.SimpleWithMenu"
                            AllowGrouping="false" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" PagerPosition="PagerPosition.TopAndBottom"
                            PagerAlwaysVisible="false" GotoFirstPageOnSort="true"
                            Data="@data" TItem="GuildTeam" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                            IsLoading=@isLoading Sort="@ShowLoading" Page="@ShowLoading" Group="@ShowLoading" Filter="@ShowLoading">
              <HeaderTemplate>
                <RadzenRow>
                  <RadzenColumn Size="12">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Variant="Variant.Filled" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@ShowAddDialog">
                      Create Team
                    </RadzenButton>
                  </RadzenColumn>
                </RadzenRow>
              </HeaderTemplate>
              <Columns>
                <RadzenDataGridColumn Visible="false" Property="@nameof(GuildTeam.Id)" Filterable="false" Title="ID" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.Name)" Filterable="true" Title="Name" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.IsEnabled)" Filterable="true" Title="Enabled" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.PermissionLevel)" Filterable="true" Title="Permission Level" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.RegisterDateUtc)" Filterable="true" Title="Register Date UTC" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.UpdateDateUtc)" Filterable="true" Title="Update Date UTC" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Context="data" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Title="Actions" >
                  <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(async () => await RemoveAsync(data))" @onclick:stopPropagation="true">
                    </RadzenButton>
                  </Template>
                </RadzenDataGridColumn>

              </Columns>
            </RadzenDataGrid>
          </RadzenCard>
        }

      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
</div>