@page "/teams"

@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Extensions
@using Modmail.NET.Language
@using Modmail.NET.Web.Blazor.Components.Layout.Shared
@using Modmail.NET.Web.Blazor.Components.Shared
@using Serilog
@using Modmail.NET.Web.Blazor.Components.Shared.Teams
@inject IDbContextFactory<ModmailDbContext> dbContextFactory
@inject DialogService dialogService
@inject  NotificationService notificationService
@inject TooltipService tooltipService


@code {

  private IQueryable<GuildTeam>? data;

  bool isLoading = false;

  async Task ShowLoading() {
    isLoading = true;

    await Task.Yield();

    isLoading = false;
  }

  private async Task reloadDataAsync(LoadDataArgs? args = null) {
    await ShowLoading();

    var dbContext = await dbContextFactory.CreateDbContextAsync();
    var query = dbContext.GuildTeams
                         .OrderByDescending(x => x.RegisterDateUtc)
                         .AsQueryable();

    if (args is not null) {
      query = query.ApplyDataGridFilter(args);
    }

    count = await query.CountAsync();


    data = args is not null
             ? query.ApplyPagination(args)
             : query.Skip(0).Take(10).AsQueryable();

    StateHasChanged();
  }


  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();

    await reloadDataAsync();
  }


  private async Task LoadDataAsync(LoadDataArgs args) {
    await reloadDataAsync(args);

  }

  private int count = 0;

  private async Task RemoveAsync(GuildTeam team) {
    var dialogResult = await dialogService.Confirm("Are you sure you want to delete this team ?",
                                                   options: new ConfirmOptions() {
                                                     OkButtonText = "Yes",
                                                     CancelButtonText = "No",
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true,
                                                   });


    if (dialogResult == true) {
      const string logMessage = $"[{nameof(Teams)}]{nameof(RemoveAsync)}({{TeamName}})";
      try {
        await team.ProcessRemoveTeamAsync();
        Log.Information(logMessage,
                        team.Name);
        notificationService.Notify(NotificationSeverity.Success,
                                   "Team deleted successfully");

        await reloadDataAsync();
      }
      catch (BotExceptionBase ex) {
        Log.Warning(ex,
                    logMessage,
                    team.Name);
        ex.NotifyException(notificationService);
      }
      catch (Exception ex) {
        Log.Fatal(ex,
                  logMessage,
                  team.Name);
        ex.NotifyException(notificationService);
      }
    }
  }

  private async Task ShowAddDialog() {
    var dialog = await dialogService.OpenAsync("Create Team",
                                               ds =>
                                                 @<div>
                                                   <CreateOrUpdateTeamDialog></CreateOrUpdateTeamDialog>
                                                 </div>,
                                               new DialogOptions() {
                                                 Width = "450px",
                                               });
    if (dialog is true) {
      await reloadDataAsync();
    }
  }

  private async Task ShowEditDialog(GuildTeam team) {
    var dialog = await dialogService.OpenAsync("Edit Team",
                                               ds =>
                                                 @<CreateOrUpdateTeamDialog Team="team"></CreateOrUpdateTeamDialog>,
                                               new DialogOptions() {
                                                 Width = "450px",
                                               });
    if (dialog is true) {
      await reloadDataAsync();
    }
  }

  private async Task ShowAddUserDialog(GuildTeam guildTeam) {
    var dialog = await dialogService.OpenAsync("Add User to Team",
                                               ds =>
                                                 @<AddUserToTeamDialog GuildTeam="guildTeam"></AddUserToTeamDialog>,
                                               new DialogOptions() {
                                                 Width = "450px",
                                               });
    if (dialog is true) {
      await reloadDataAsync();
    }
  }

  private async Task ShowAddRoleDialog(GuildTeam guildTeam) {
    var dialog = await dialogService.OpenAsync("Add Role to Team",
                                               ds =>
                                                 @<AddRoleToTeamDialog GuildTeam="guildTeam"></AddRoleToTeamDialog>,
                                               new DialogOptions() {
                                                 Width = "450px",
                                               });
    if (dialog is true) {
      await reloadDataAsync();
    }
  }

  private async Task ShowDetailsDialog(GuildTeam guildTeam) {
    var dialog = await dialogService.OpenAsync("Team Details",
                                               ds =>
                                                 @<TeamDetailsDialog Team="guildTeam"></TeamDetailsDialog>,
                                               new DialogOptions() {
                                              
                                               });
    if (dialog is true) {
      await reloadDataAsync();
    }
  }

}


<div class="rz-mx-auto">
  <RadzenRow>
    <RadzenColumn Size="12">
      <RadzenRow>
        <RadzenColumn Size="12">
          <RadzenText TextStyle="TextStyle.H3" class="fw-bold">
            Teams
          </RadzenText>
          @* <hr class="my-4"/> *@
        </RadzenColumn>
      </RadzenRow>
      <RadzenRow RowGap="4" class="rz-mt-5">
        @if (data is null) {
          <Loading></Loading>
        }
        else {
          <RadzenCard Style="width: 100% !important;" class="rz-shadow-7">
            <RadzenDataGrid Responsive="true" Count="count" LoadData="LoadDataAsync" AllowColumnPicking="true" AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.SimpleWithMenu"
                            AllowGrouping="false" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" PagerPosition="PagerPosition.TopAndBottom"
                            PagerAlwaysVisible="false" GotoFirstPageOnSort="true"
                            Data="@data" TItem="GuildTeam" ColumnWidth="150px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                            IsLoading=@isLoading Sort="@ShowLoading" Page="@ShowLoading" Group="@ShowLoading" Filter="@ShowLoading">
              <HeaderTemplate>
                <RadzenRow>
                  <RadzenColumn Size="12">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Variant="Variant.Filled" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@ShowAddDialog">
                      Create Team
                    </RadzenButton>
                  </RadzenColumn>
                </RadzenRow>
              </HeaderTemplate>
              <Columns>
                <RadzenDataGridColumn Visible="false" Property="@nameof(GuildTeam.Id)" Filterable="false" Title="ID" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.Name)" Filterable="true" Title="Name" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.IsEnabled)" Width="90px" Filterable="true" Title="Enabled" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.PermissionLevel)" Filterable="true" Title="Permission Level" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.RegisterDateUtc)" Width="120px" Filterable="true" Title="Register Date UTC" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.UpdateDateUtc)" Width="120px" Filterable="true" Title="Update Date UTC" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.PingOnNewTicket)" Width="120px" Filterable="true" Title="Ping On New Ticket" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Visible="true" Property="@nameof(GuildTeam.PingOnNewMessage)" Width="120px" Filterable="true" Title="Ping On New Message" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn Context="data" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Title="Actions">
                  <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary"
                                  Icon="info"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@(async () => await ShowDetailsDialog(data))"
                                  MouseEnter="@(args => tooltipService.Open(args, "Details", new TooltipOptions() { Style = "background: var(--rz-primary);" }))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Success"
                                  Icon="person_add"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@(async () => await ShowAddUserDialog(data))"
                                  MouseEnter="@(args => tooltipService.Open(args, "Add User", new TooltipOptions() { Style = "background: var(--rz-success);" }))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Success"
                                  Icon="group_add"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@(async () => await ShowAddRoleDialog(data))"
                                  MouseEnter="@(args => tooltipService.Open(args, "Add Role", new TooltipOptions() { Style = "background: var(--rz-success);" }))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Info"
                                  Icon="edit"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  Click="@(async () => await ShowEditDialog(data))"
                                  MouseEnter="@(args => tooltipService.Open(args, "Edit Team", new TooltipOptions() { Style = "background: var(--rz-info);" }))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                  Icon="delete"
                                  Variant="Variant.Flat"
                                  Shade="Shade.Lighter"
                                  Size="ButtonSize.Medium"
                                  class="rz-my-1 rz-ms-1"
                                  MouseEnter="@(args => tooltipService.Open(args, "Delete Team", new TooltipOptions() { Style = "background: var(--rz-danger);" }))"
                                  Click="@(async () => await RemoveAsync(data))"
                                  @onclick:stopPropagation="true">
                    </RadzenButton>
                  </Template>
                </RadzenDataGridColumn>

              </Columns>
            </RadzenDataGrid>
          </RadzenCard>
        }

      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
</div>