@using System.Security.Claims
@using Modmail.NET.Web.Blazor.Extensions
@using Modmail.NET.Web.Blazor.Providers
@inject NavigationManager NavigationManager
@attribute [AuthorizeTeam]

@code {

  [CascadingParameter]
  public required Task<AuthenticationState> AuthContext { get; set; }

  private bool _isLoading = true;
  private ulong _userId;
  private string _username = string.Empty;


  protected override async Task OnInitializedAsync() {
    var auth = await AuthContext;
    _userId = auth.User.GetUserId();
    _username = auth.User.FindFirst(ClaimTypes.Name)?.Value ?? string.Empty; //TODO: Move these to extension methods
    var roleStr = auth.User.FindFirst(ClaimTypes.Role)?.Value;
    if (string.IsNullOrEmpty(roleStr)) {
      NavigationManager.NavigateTo("result/" + Lang.ErrorRoleIsNull);
      return;
    }

    _isLoading = false;
  }

  private void ClickLogout() {
    NavigationManager.NavigateTo("/auth/logout", true);
  }

}



<RadzenRow>
  <RadzenColumn Size="12">
    @if (_isLoading) {
      <Loading></Loading>
    }
    else {
      <RadzenRow class="rz-my-4">
        <RadzenColumn>
          <RadzenLabel>Discord User Id</RadzenLabel>
        </RadzenColumn>
        <RadzenColumn>
          @_userId.ToString()
        </RadzenColumn>
      </RadzenRow>


      <RadzenRow class="rz-my-4">
        <RadzenColumn>
          <RadzenLabel>Discord Username</RadzenLabel>
        </RadzenColumn>
        <RadzenColumn>
          @_username
        </RadzenColumn>
      </RadzenRow>


      <RadzenRow class="rz-my-4 rz-pt-4">
        <RadzenButton ButtonType="ButtonType.Button"
                      Text="Logout"
                      Icon="logout"
                      Click="ClickLogout"
                      ButtonStyle="ButtonStyle.Warning"/>
      </RadzenRow>
    }

  </RadzenColumn>
</RadzenRow>
