@page "/tags"
@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Common.Exceptions
@using Modmail.NET.Common.Static
@using Modmail.NET.Database.Entities
@using Modmail.NET.Features.Tag.Commands
@using Modmail.NET.Features.Teams.Queries
@using Modmail.NET.Web.Blazor.Components.Pages.Tag.Shared
@using Modmail.NET.Web.Blazor.Extensions
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject ISender Sender

@code {

    [CascadingParameter]
    public required Task<AuthenticationState> AuthContext { get; set; }

    private IQueryable<Tag>? _data;

    bool _isLoading;
    private int _count;

    private bool _hasPermissionToManage;

    async Task ShowLoading() {
        _isLoading = true;

        await Task.Yield();

        _isLoading = false;
    }

    private async Task ReloadDataAsync(LoadDataArgs? args = null) {
        await ShowLoading();

        var dbContext = await DbContextFactory.CreateDbContextAsync();
        var query = dbContext.Tags
                             .AsNoTracking()
                             .OrderByDescending(x => x.RegisterDateUtc)
                             .AsQueryable();

        if (args is not null) {
            query = query.ApplyDataGridFilter(args);
        }

        _count = await query.CountAsync();


        _data = args is not null
                    ? query.ApplyPagination(args)
                    : query.Skip(0).Take(10).AsQueryable();

        StateHasChanged();
    }


    protected override async Task OnInitializedAsync() {
        var state = await AuthContext;
        var userId = state.User.GetUserId();
        _hasPermissionToManage = await Sender.Send(new CheckPermissionAccessQuery(userId, AuthPolicy.ManageTags));

        await ReloadDataAsync();
    }


    private async Task LoadDataAsync(LoadDataArgs args) {
        await ReloadDataAsync(args);
    }


    private async Task RemoveAsync(Tag data) {
        var dialogResult = await DialogService.Confirm("You are deleting a tag, this action can not be undone.",
                                                       "Are you sure ?",
                                                       new ConfirmOptions {
                                                           OkButtonText = Lang.Yes.Translate(),
                                                           CancelButtonText = Lang.No.Translate(),
                                                           CloseDialogOnOverlayClick = true,
                                                           CloseDialogOnEsc = true
                                                       });


        if (dialogResult == true) {
            const string logMessage = $"[{nameof(Tag)}]{nameof(RemoveAsync)}({{@data}})";
            try {
                var state = await AuthContext;
                var userId = state.User.GetUserId();

                await Sender.Send(new ProcessRemoveTagCommand(userId, data.Id));
                Log.Information(logMessage,
                                data);
                NotificationService.Notify(NotificationSeverity.Success,
                                           "Tag deleted successfully");

                await ReloadDataAsync();
            }
            catch (ModmailBotException ex) {
                Log.Warning(ex,
                            logMessage,
                            data);
                ex.NotifyException(NotificationService);
            }
            catch (Exception ex) {
                Log.Fatal(ex,
                          logMessage,
                          data);
                ex.NotifyException(NotificationService);
            }
        }
    }

    private async Task ShowAddDialog() {
        var dialog = await DialogService.OpenAsync("Create Tag",
                                                   _ =>
                                                       @<CreateOrUpdateTagDialogComponent></CreateOrUpdateTagDialogComponent>,
                                                   new DialogOptions {
                                                       Width = "600px"
                                                   });
        if (dialog is true) {
            await ReloadDataAsync();
        }
    }

    private async Task ShowEditDialog(Tag data) {
        var dialog = await DialogService.OpenAsync("Edit Tag",
                                                   _ =>
                                                       @<CreateOrUpdateTagDialogComponent
                                                           Tag="data"></CreateOrUpdateTagDialogComponent>,
                                                   new DialogOptions {
                                                       Width = "600px"
                                                   });
        if (dialog is true) {
            await ReloadDataAsync();
        }
    }

}


<div class="container-xxl rz-mx-auto">
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenRow>
                <RadzenColumn Size="12">
                    <RadzenText TextStyle="TextStyle.H3" class="fw-bold">
                        Tags
                    </RadzenText>
                    @* <hr class="my-4"/> *@
                    <p>
                        Tags allow you to set short names to trigger pre-defined content responses from the bot.
                    </p>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow RowGap="4" class="rz-mt-5">
                @if (_data is null) {
                    <Loading></Loading>
                }
                else {
                    <RadzenCard Style="width: 100% !important;" class="rz-shadow-7">
                        <RadzenDataGrid Responsive="true" Count="_count" LoadData="LoadDataAsync"
                                        AllowColumnPicking="true"
                                        Density="Density.Default"

                                        AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                                        FilterMode="FilterMode.SimpleWithMenu"
                                        AllowGrouping="false" AllowSorting="true" PageSize="10" AllowPaging="true"
                                        PagerHorizontalAlign="HorizontalAlign.Left"
                                        PagerPosition="PagerPosition.TopAndBottom"
                                        PagerAlwaysVisible="false" GotoFirstPageOnSort="true"
                                        Data="@_data" TItem="Tag" ColumnWidth="150px"
                                        LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
                                        IsLoading=@_isLoading Sort="@ShowLoading" Page="@ShowLoading"
                                        Group="@ShowLoading"
                                        Filter="@ShowLoading">
                            <HeaderTemplate>
                                <RadzenRow>
                                    <RadzenColumn Size="12">
                                        @if (_hasPermissionToManage) {
                                            <RadzenButton ButtonStyle="ButtonStyle.Primary"
                                                          Icon="add"
                                                          Variant="Variant.Filled"
                                                          Shade="Shade.Lighter"
                                                          Size="ButtonSize.Medium"
                                                          class="rz-my-1 rz-ms-1"
                                                          Click="@ShowAddDialog">
                                                Create Tag
                                            </RadzenButton>
                                        }

                                    </RadzenColumn>
                                </RadzenRow>
                            </HeaderTemplate>
                            <Columns>
                                <RadzenDataGridColumn Visible="false" Property="@nameof(Tag.Id)" Filterable="false"
                                                      Title="ID"
                                                      TextAlign="TextAlign.Center"/>
                                <RadzenDataGridColumn Visible="true" Property="@nameof(Tag.Name)" Filterable="true"
                                                      Title="Shortcut"
                                                      TextAlign="TextAlign.Center"/>
                                <RadzenDataGridColumn Visible="true" Property="@nameof(Tag.Title)" Width="170px"
                                                      Filterable="true"
                                                      Title="Title" TextAlign="TextAlign.Center"/>
                                <RadzenDataGridColumn Visible="true" Property="@nameof(Tag.Content)" Filterable="true"
                                                      Title="Content" TextAlign="TextAlign.Center"/>

                                <RadzenDataGridColumn Context="data" TextAlign="TextAlign.Center" Filterable="false"
                                                      Sortable="false"
                                                      Title="Actions">
                                    <Template Context="data">
                                        @* <RadzenButton ButtonStyle="ButtonStyle.Primary" *@
                                        @*               Icon="info" *@
                                        @*               Variant="Variant.Flat" *@
                                        @*               Shade="Shade.Lighter" *@
                                        @*               Size="ButtonSize.Medium" *@
                                        @*               class="rz-my-1 rz-ms-1" *@
                                        @*               Click="@(async () => await ShowDetailsDialog(data))" *@
                                        @*               MouseEnter="@(args => tooltipService.Open(args, "Details", new TooltipOptions() { Style = "background: var(--rz-primary);" }))" *@
                                        @*               @onclick:stopPropagation="true"> *@
                                        @* </RadzenButton> *@
                                        @* *@
                                        @if (_hasPermissionToManage) {
                                            <RadzenButton ButtonStyle="ButtonStyle.Info"
                                                          Icon="edit"
                                                          Variant="Variant.Flat"
                                                          Shade="Shade.Lighter"
                                                          Size="ButtonSize.Medium"
                                                          class="rz-my-1 rz-ms-1"
                                                          Click="@(async () => await ShowEditDialog(data))"
                                                          MouseEnter="@(args => TooltipService.Open(args, "Edit Tag", new TooltipOptions { Style = "background: var(--rz-info);" }))"
                                                          @onclick:stopPropagation="true">
                                            </RadzenButton>
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                                          Icon="delete"
                                                          Variant="Variant.Flat"
                                                          Shade="Shade.Lighter"
                                                          Size="ButtonSize.Medium"
                                                          class="rz-my-1 rz-ms-1"
                                                          MouseEnter="@(args => TooltipService.Open(args, "Delete Tag", new TooltipOptions { Style = "background: var(--rz-danger);" }))"
                                                          Click="@(async () => await RemoveAsync(data))"
                                                          @onclick:stopPropagation="true">
                                            </RadzenButton>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>

                            </Columns>
                        </RadzenDataGrid>
                    </RadzenCard>
                }

            </RadzenRow>
        </RadzenColumn>
    </RadzenRow>
</div>