@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using Modmail.NET.Abstract
@using Modmail.NET.Extensions
@using Modmail.NET.Features.Blacklist
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ModmailBot Bot
@inject ISender Sender
@inject IOptions<BotConfig> Options

@code {


  [CascadingParameter]
  public Task<AuthenticationState> AuthContext { get; set; }

  private List<DiscordUserInfo> _users = new();

  private ulong? _selectedUserId;

  private string? _reason = string.Empty;

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    var dbContext = await DbContextFactory.CreateDbContextAsync();

    _users = await dbContext.DiscordUserInfos
                            .GroupJoin(dbContext.TicketBlacklists,
                                       user => user.Id,
                                       blacklist => blacklist.DiscordUserId,
                                       (user, blacklists) => new { user, blacklists })
                            .SelectMany(x => x.blacklists.DefaultIfEmpty(),
                                        (x, blacklist) => new { x.user, blacklist })
                            .Where(x => x.blacklist == null) // Only take users that are not in blacklist
                            .OrderBy(x => x.user.Username)
                            .Where(x => x.user.Id != Bot.Client.CurrentUser.Id) // Exclude bot
                            .Where(x => Options.Value.OwnerUsers.All(y => y != x.user.Id)) // Exclude bot owner
                            .Select(x => x.user)
                            .ToListAsync();
  }

  private async Task SubmitAsync() {
    if (_selectedUserId is null) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please select a user.");
      return;
    }

    var dialogResult = await DialogService.Confirm("Are you sure you want to block this user?",
                                                   options: new ConfirmOptions {
                                                     OkButtonText = "Yes",
                                                     CancelButtonText = "No",
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true
                                                   });
    if (dialogResult == true) {
      const string logMessage = $"[{nameof(AddBlacklistDialog)}]{nameof(SubmitAsync)}({{UserId}},{{Reason}})";
      try {
        var state = await AuthContext;
        var discordUserId = state.User.GetUserId();
        await Sender.Send(new ProcessAddUserToBlacklistCommand(discordUserId, _selectedUserId.Value, _reason));
        NotificationService.Notify(NotificationSeverity.Success, "Success", "User blacklisted successfully.");
        Log.Information(logMessage,
                        _selectedUserId.Value,
                        _reason);
        DialogService.Close(true);
      }
      catch (BotExceptionBase ex) {
        ex.NotifyException(NotificationService);
        Log.Warning(logMessage,
                    _selectedUserId.Value,
                    _reason);
      }
      catch (Exception ex) {
        ex.NotifyException(NotificationService);
        Log.Fatal(logMessage,
                  _selectedUserId.Value,
                  _reason);
      }
    }
  }

  // private sealed record AddBlackListModel(ulong UserId);

}


<RadzenRow>
  <RadzenColumn>
    <RadzenRow class="rz-my-4">
      <RadzenAlert AllowClose="false" Size="AlertSize.Small" AlertStyle="AlertStyle.Warning" Variant="Variant.Flat"
                   Shade="Shade.Lighter">
        Blocking user will force close active tickets if user has any.
      </RadzenAlert>
      <RadzenAlert AllowClose="false" Size="AlertSize.Small" AlertStyle="AlertStyle.Info" Variant="Variant.Flat"
                   Shade="Shade.Lighter">
        You can only see users that are interacted with the bot.
      </RadzenAlert>
    </RadzenRow>
    <RadzenRow class="rz-my-4">
      <RadzenDropDown Style="width: 100%;" TValue="ulong?" @bind-Value="_selectedUserId" Placeholder="Select user"
                      AllowFiltering="true" class="w-100"
                      Data="@(_users)" TextProperty="@nameof(DiscordUserInfo.Username)"
                      ValueProperty="@nameof(DiscordUserInfo.Id)"/>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Block Reason" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="block-reason" @bind-Value="@_reason" class="w-100"/>
      </RadzenFormField>
    </RadzenRow>


    <RadzenRow class="rz-my-4">
      <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="Block User"
                    Click="SubmitAsync"/>
    </RadzenRow>


  </RadzenColumn>
</RadzenRow>