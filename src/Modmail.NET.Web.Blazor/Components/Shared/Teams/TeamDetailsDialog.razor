@using DSharpPlus.Entities
@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Abstract
@using Modmail.NET.Extensions
@using Modmail.NET.Features.Teams
@using Modmail.NET.Static
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject ModmailBot Bot
@inject ISender Sender

@code {

  [CascadingParameter]
  public Task<AuthenticationState> AuthContext { get; set; }

  [Parameter]
  public required GuildTeam Team { get; set; }

  private List<DiscordUserInfo> _members;
  private List<DiscordRole> _roles;

  protected override async Task OnInitializedAsync() {
    var dbContext = await DbContextFactory.CreateDbContextAsync();

    await ReloadDataAsync();
    _members = await dbContext.DiscordUserInfos.ToListAsync();
    _roles = await Bot.GetRoles();
  }

  bool _isLoading = false;
  private int _count;
  private List<GuildTeamMember> _data;

  async Task ShowLoading() {
    _isLoading = true;

    await Task.Yield();

    _isLoading = false;
  }

  private async Task LoadDataAsync(LoadDataArgs obj) {
    await ReloadDataAsync(obj);
  }

  private async Task ReloadDataAsync(LoadDataArgs args = null) {
    await ShowLoading();

    var dbContext = await DbContextFactory.CreateDbContextAsync();
    var query = dbContext.GuildTeamMembers
                         .Where(x => x.GuildTeamId == Team.Id)
                         .OrderByDescending(x => x.RegisterDateUtc)
                         .AsQueryable();


    _count = await query.CountAsync();

    if (args is not null) {
      query = query.ApplyDataGridFilter(args);
    }

    _data = args is not null
              ? await query.ApplyPagination(args).ToListAsync()
              : await query.Skip(0).Take(5).ToListAsync();

    StateHasChanged();
  }


  private async Task RemoveAsync(GuildTeamMember guildTeamMember) {
    const string logMessage = $"[{nameof(TeamDetailsDialog)}]{nameof(RemoveAsync)}({{@Member}})";
    try {
      var state = await AuthContext;
      var userId = state.User.GetUserId();
      await Sender.Send(new ProcessRemoveTeamMemberCommand(userId, guildTeamMember.Key, guildTeamMember.Type));
      Log.Information(logMessage, guildTeamMember);
      NotificationService.Notify(NotificationSeverity.Success, "Success", "Team member removed");
      await ReloadDataAsync();
    }
    catch (BotExceptionBase ex) {
      Log.Warning(ex, logMessage, guildTeamMember);
      ex.NotifyException(NotificationService);
    }
    catch (Exception ex) {
      Log.Fatal(ex, logMessage, guildTeamMember);
      ex.NotifyException(NotificationService);
    }
  }

}

@if (_data is null || _roles is null || _members is null) {
  <Loading></Loading>
}
else {
  <RadzenRow>
    <RadzenColumn>
      @if (_data.Count == 0) {
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">Team has no
          members
        </RadzenText>
      }
      <RadzenDataList Count="@_count"
                      LoadData="LoadDataAsync"
                      PageSize="5"
                      AllowPaging="true"
                      PagerPosition="PagerPosition.Bottom"
                      PagerAlwaysVisible="false"
                      IsLoading=@_isLoading
                      WrapItems="true"
                      Data="@_data"
                      TItem="GuildTeamMember"
                      PagerHorizontalAlign="HorizontalAlign.Center"

                      ShowPagingSummary="true">
        <Template Context="member">
          <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
            <RadzenRow Gap="0">
              <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                @if (member.Type == TeamMemberDataType.UserId) {
                  <RadzenColumn Size="12" SizeMD="6">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5"
                                class="rz-color-on-secondary-lighter">@(_members.FirstOrDefault(x => x.Id == member.Key)?.Username ?? $"Id:{member.Key}")</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">User</RadzenText>
                  </RadzenColumn>
                }
                else {
                  <RadzenColumn Size="12" SizeMD="6">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5"
                                class="rz-color-on-secondary-lighter">@(_roles.FirstOrDefault(x => x.Id == member.Key)?.Name ?? $"Id:{member.Key}")</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">Role</RadzenText>
                  </RadzenColumn>
                }
              </RadzenColumn>
              <RadzenColumn Size="12" SizeLG="7" class="rz-p-4">
                <RadzenRow Gap="0">
                  <RadzenColumn Size="12">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Register Date UTC
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">@(member.RegisterDateUtc)</RadzenText>
                  </RadzenColumn>
                </RadzenRow>
              </RadzenColumn>
              <RadzenColumn Size="12" SizeLG="2" class="rz-p-4">
                <RadzenButton ButtonStyle="ButtonStyle.Danger"
                              Icon="delete"
                              Variant="Variant.Flat"
                              Shade="Shade.Lighter"
                              Size="ButtonSize.Medium"
                              class="rz-my-1 rz-ms-1"
                              MouseEnter="@(args => TooltipService.Open(args, $"Remove {(member.Type == TeamMemberDataType.UserId ? "user" : "role")} from team", new TooltipOptions { Style = "background: var(--rz-danger);" }))"
                              Click="@(async () => await RemoveAsync(member))"
                              @onclick:stopPropagation="true">
                </RadzenButton>
              </RadzenColumn>
            </RadzenRow>
          </RadzenCard>
        </Template>
      </RadzenDataList>

    </RadzenColumn>
  </RadzenRow>
}