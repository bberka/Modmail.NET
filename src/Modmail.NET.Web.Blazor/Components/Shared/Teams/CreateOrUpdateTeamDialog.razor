@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using Modmail.NET.Abstract
@using Modmail.NET.Extensions
@using Modmail.NET.Features.Permission
@using Modmail.NET.Features.Teams
@using Modmail.NET.Static
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ModmailBot Bot
@inject ISender Sender
@inject IOptions<BotConfig> Options

@code {


  private List<DiscordUserInfo> _users;

  [CascadingParameter]
  public Task<AuthenticationState> AuthContext { get; set; }

  [Parameter]
  public GuildTeam Team { get; set; }

  private TeamPermissionLevel? _permissionLevel;
  private bool _pingOnNewTicket = false;
  private bool _pingOnTicketMessage = false;
  private bool _allowAccessToWebPanel = false;
  private string _teamName;
  private bool _isEnabled = true;
  private TeamPermissionLevel _userPermissionLevel;

  private bool IsUpdate => Team is not null;

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    var dbContext = await DbContextFactory.CreateDbContextAsync();

    _users = await dbContext.DiscordUserInfos
                            .OrderBy(x => x.Username)
                            .Where(x => x.Id != Bot.Client.CurrentUser.Id && Options.Value.OwnerUsers.Contains(x.Id))
                            .ToListAsync();

    _permissionLevel = IsUpdate
                         ? Team!.PermissionLevel
                         : null;
    _teamName = IsUpdate
                  ? Team?.Name
                  : null;
    _pingOnNewTicket = IsUpdate && Team!.PingOnNewTicket;
    _pingOnTicketMessage = IsUpdate && (Team?.PingOnNewMessage ?? false);
    _isEnabled = IsUpdate && Team!.IsEnabled;
    _allowAccessToWebPanel = Team?.AllowAccessToWebPanel ?? false;

    var state = await AuthContext;
    var userId = state.User.GetUserId();
    _userPermissionLevel = await Sender.Send(new GetPermissionLevelQuery(userId, true)) ?? throw new NullReferenceException(nameof(TeamPermissionLevel));
  }

  private async Task SubmitAsync() {
    if (string.IsNullOrEmpty(_teamName)) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please enter a team name.");
      return;
    }

    if (_permissionLevel is null) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please select a permission level.");
      return;
    }

    var dialogResult = await DialogService.Confirm("Are you sure you want to create new team ?",
                                                   options: new ConfirmOptions {
                                                     OkButtonText = "Yes",
                                                     CancelButtonText = "No",
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true
                                                   });
    if (dialogResult == true) {
      const string logMessage = $"[{nameof(CreateOrUpdateTeamDialog)}]{nameof(SubmitAsync)}({{TeamName}},{{PermissionLevel}})";
      var state = await AuthContext;
      var userId = state.User.GetUserId();

      try {
        if (IsUpdate && Team is not null) {
          await Sender.Send(new ProcessUpdateTeamCommand(userId, _teamName, _permissionLevel.Value, _pingOnNewTicket, _pingOnTicketMessage, _isEnabled, _allowAccessToWebPanel));
          Log.Information(logMessage, _teamName, _permissionLevel);
          NotificationService.Notify(NotificationSeverity.Success, "Success", "Team updated successfully.");
        }
        else {
          await Sender.Send(new ProcessCreateTeamCommand(userId, _teamName, _permissionLevel.Value, _pingOnNewTicket, _pingOnTicketMessage, _allowAccessToWebPanel));
          Log.Information(logMessage, _teamName, _permissionLevel);
          NotificationService.Notify(NotificationSeverity.Success, "Success", "Team created successfully.");
        }

        DialogService.Close(true);
      }
      catch (BotExceptionBase ex) {
        Log.Warning(ex, logMessage, _teamName, _permissionLevel);
        ex.NotifyException(NotificationService);
      }
      catch (Exception ex) {
        Log.Fatal(ex, logMessage, _teamName, _permissionLevel);
        ex.NotifyException(NotificationService);
      }
    }
  }

}


@if (_users is null) {
  <Loading></Loading>
}
else {
  <RadzenRow>
    <RadzenColumn>
      @if (IsUpdate) {
        <RadzenRow class="rz-my-4">
          <RadzenSwitch Name="isEnabled" @bind-Value=@_isEnabled/>
          <RadzenLabel Component="isEnabled">
            Is Enabled
          </RadzenLabel>
        </RadzenRow>
      }


      <RadzenRow class="rz-my-4">
        <RadzenFormField Text="Team Name" class="w-100" Variant="Variant.Outlined">
          <RadzenTextBox Name="team-name" @bind-Value="@_teamName"/>
        </RadzenFormField>
      </RadzenRow>

      <RadzenRow class="rz-my-4">
        <RadzenDropDown Style="user-select: none" Name="permission-level"
                        Data="Enum.GetValues<TeamPermissionLevel>().Where(x => (int)x  <= (int)_userPermissionLevel)"
                        class="w-100" TValue="TeamPermissionLevel?" @bind-Value="_permissionLevel"
                        Placeholder="Select Permission Level" AllowFiltering="false"/>
      </RadzenRow>
      <RadzenRow class="rz-my-4">
        <RadzenSwitch Name="pingOnNewTicket" @bind-Value=@_pingOnNewTicket/>
        <RadzenLabel Component="pingOnNewTicket">
          Ping on new ticket
        </RadzenLabel>
      </RadzenRow>

      <RadzenRow class="rz-my-4">
        <RadzenSwitch Name="pingOnTicketMessage" @bind-Value=@_pingOnTicketMessage/>
        <RadzenLabel Component="pingOnTicketMessage">
          Ping on ticket message
        </RadzenLabel>

      </RadzenRow>

      @if (_permissionLevel is not TeamPermissionLevel.Owner) {
        <RadzenRow class="rz-my-4">
          <RadzenSwitch Name="pingOnTicketMessage" @bind-Value=@_allowAccessToWebPanel/>
          <RadzenLabel Component="pingOnTicketMessage">
            Allow Access To Web Panel
          </RadzenLabel>
        </RadzenRow>
      }



      <RadzenRow class="rz-my-4">
        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="@(IsUpdate
                                                                                                 ? "Update"
                                                                                                 : "Create")"
                      Click="SubmitAsync"/>
      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
}