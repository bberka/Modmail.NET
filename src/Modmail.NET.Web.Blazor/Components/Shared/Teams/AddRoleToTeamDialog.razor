@using DSharpPlus.Entities
@using Microsoft.EntityFrameworkCore
@using Modmail.NET.Abstract
@using Modmail.NET.Features.Teams
@using Modmail.NET.Static
@using Serilog
@inject IDbContextFactory<ModmailDbContext> DbContextFactory
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ModmailBot Bot
@inject ISender Sender

@code {
  private List<DiscordRole> _roles;
  private ulong _selectedRoleId = 0;

  [Parameter]
  public required GuildTeam GuildTeam { get; set; }

  protected override async Task OnInitializedAsync() {
    var dbContext = await DbContextFactory.CreateDbContextAsync();
    var teamMemberIds = dbContext.GuildTeamMembers
                                 .Where(x => x.GuildTeamId == GuildTeam.Id && x.Type == TeamMemberDataType.RoleId)
                                 .Select(x => x.Key)
                                 .ToList();
    _roles = (await Bot.GetRoles())
             .Where(x => x.Name != "@everyone")
             .Where(x => teamMemberIds.All(y => y != x.Id)) // Exclude team members
             .ToList();
  }

  private async Task SubmitAsync() {
    if (_selectedRoleId == 0) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please select a user.");
      return;
    }

    const string logMessage = $"[{nameof(AddRoleToTeamDialog)}]{nameof(SubmitAsync)}({{RoleId}})";

    try {
      var role = _roles?.First(x => x.Id == _selectedRoleId);
      if (role is null) {
        NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Role not found.");
        return;
      }

      await Sender.Send(new ProcessAddRoleToTeamCommand(GuildTeam.Id, role));
      Log.Information(logMessage, _selectedRoleId);
      NotificationService.Notify(NotificationSeverity.Success, "Success", "Role added to team successfully.");
      DialogService.Close(true);
    }
    catch (BotExceptionBase ex) {
      Log.Warning(logMessage, _selectedRoleId);
      ex.NotifyException(NotificationService);
    }
    catch (Exception ex) {
      Log.Fatal(logMessage, _selectedRoleId);
      ex.NotifyException(NotificationService);
    }
  }

}

@if (_roles is null) {
  <Loading></Loading>
}
else {
  <RadzenRow>
    <RadzenColumn>
      <RadzenRow class="rz-my-4">
        <RadzenDropDown Style="user-select: none"
                        Name="user-dropdown"
                        Data="@_roles" class="w-100"
                        TextProperty="@nameof(DiscordRole.Name)"
                        ValueProperty="@nameof(DiscordRole.Id)"
                        TValue="ulong"
                        @bind-Value="_selectedRoleId"
                        Placeholder="Select Role"
                        AllowFiltering="true"/>
      </RadzenRow>
      <RadzenRow class="rz-my-4">
        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="Add" Click="SubmitAsync"/>
      </RadzenRow>
    </RadzenColumn>
  </RadzenRow>
}