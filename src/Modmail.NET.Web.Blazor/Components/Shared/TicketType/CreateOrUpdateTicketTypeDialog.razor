@using DSharpPlus.Entities
@using Modmail.NET.Common.Exceptions
@using Modmail.NET.Database.Entities
@using Modmail.NET.Features.Ticket.Commands
@using Modmail.NET.Web.Blazor.Extensions
@using Serilog
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ModmailBot Bot
@inject ISender Sender

@code {

  [CascadingParameter]
  public Task<AuthenticationState> AuthContext { get; set; }

  [Parameter]
  public TicketType TicketType { get; set; }

  bool IsUpdate => TicketType != null;
  string _name = "";
  string _emoji = "";
  string _description = "";
  int _order = 0;
  bool _isEnabled = true;
  string _embedMessageTitle = null;
  string _embedMessageContent = null;

  protected override Task OnInitializedAsync() {
    if (TicketType is not null) {
      _name = TicketType.Name;
      _emoji = TicketType.Emoji;
      _description = TicketType.Description;
      _order = TicketType.Order;
      _isEnabled = TicketType.IsEnabled;
      _embedMessageTitle = TicketType.EmbedMessageTitle;
      _embedMessageContent = TicketType.EmbedMessageContent;
    }

    return base.OnInitializedAsync();
  }

  private async Task SubmitAsync() {
    if (string.IsNullOrEmpty(_name)) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please enter a name.");
      return;
    }

    if (string.IsNullOrEmpty(_description)) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please enter a description.");
      return;
    }

    var fromUnicode = DiscordEmoji.TryFromUnicode(_emoji, out var unicodeEmoji);
    var fromName = DiscordEmoji.TryFromName(Bot.Client, _emoji, out var nameEmoji);
    var anySuccessEmojiParse = fromUnicode || fromName;
    if (!anySuccessEmojiParse) {
      NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Please enter a valid emoji.");
      return;
    }

    var emojiUnicode = fromUnicode
                         ? unicodeEmoji.Name
                         : fromName
                           ? nameEmoji
                           : _emoji;


    var dialogResult = await DialogService.Confirm(IsUpdate
                                                     ? "Are you sure you want to update this ticket type ?"
                                                     : "Are you sure you want to create new ticket type ?",
                                                   options: new ConfirmOptions {
                                                     OkButtonText = "Yes",
                                                     CancelButtonText = "No",
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true
                                                   });
    if (dialogResult == true) {
      const string logMessage = $"[{nameof(CreateOrUpdateTicketTypeDialog)}]{nameof(SubmitAsync)}({{Name}})";
      try {
        var state = await AuthContext;
        var userId = state.User.GetUserId();

        if (IsUpdate && TicketType is not null) {
          TicketType.Name = _name;
          TicketType.Emoji = emojiUnicode;
          TicketType.Description = _description;
          TicketType.Order = _order;
          TicketType.EmbedMessageTitle = _embedMessageTitle;
          TicketType.EmbedMessageContent = _embedMessageContent;
          TicketType.IsEnabled = _isEnabled;
          await Sender.Send(new ProcessUpdateTicketTypeCommand(userId, TicketType));
          Log.Information(logMessage, _name);
          NotificationService.Notify(NotificationSeverity.Success, "Success", "Ticket Type updated successfully.");
        }
        else {
          await Sender.Send(new ProcessCreateTicketTypeCommand(userId,
                                                               _name,
                                                               emojiUnicode,
                                                               _description,
                                                               _order,
                                                               _embedMessageTitle,
                                                               _embedMessageContent));
          Log.Information(logMessage, _name);
          NotificationService.Notify(NotificationSeverity.Success, "Success", "Ticket Type created successfully.");
        }

        DialogService.Close(true);
      }
      catch (ModmailBotException ex) {
        Log.Warning(ex, logMessage, _name);
        ex.NotifyException(NotificationService);
      }
      catch (Exception ex) {
        Log.Fatal(ex, logMessage, _name);
        ex.NotifyException(NotificationService);
      }
    }
  }

}


<RadzenRow>
  <RadzenColumn>
    @if (IsUpdate) {
      <RadzenRow class="rz-my-4">
        <RadzenSwitch Name="isEnabled" @bind-Value=@_isEnabled/>
        <RadzenLabel Component="isEnabled">
          Is Enabled
        </RadzenLabel>
      </RadzenRow>
    }


    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Name" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="name" @bind-Value="@_name"/>
      </RadzenFormField>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Emoji" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="Emoji" @bind-Value="@_emoji"></RadzenTextBox>
      </RadzenFormField>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Description" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="Description" @bind-Value="@_description"></RadzenTextBox>
      </RadzenFormField>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Order" class="w-100" Variant="Variant.Outlined">
        <RadzenNumeric Name="Order" @bind-Value="@_order"></RadzenNumeric>
      </RadzenFormField>
    </RadzenRow>


    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Embed Message Title" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="embedMessageTitle" @bind-Value="@_embedMessageTitle"></RadzenTextBox>
      </RadzenFormField>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Embed Message Content" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="embedMessageContent" @bind-Value="@_embedMessageContent"></RadzenTextBox>
      </RadzenFormField>
    </RadzenRow>


    <RadzenRow class="rz-my-4">
      <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="@(IsUpdate
                                                                                               ? "Update"
                                                                                               : "Create")"
                    Click="SubmitAsync"/>
    </RadzenRow>
  </RadzenColumn>
</RadzenRow>