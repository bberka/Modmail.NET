@using DSharpPlus.Entities
@using Serilog
@inject DialogService dialogService
@inject NotificationService notificationService

@code {

  [Parameter]
  public TicketType? TicketType { get; set; }

  bool isUpdate => TicketType != null;
  string name = "";
  string? emoji = "";
  string description = "";
  int order = 0;
  bool isEnabled = true;
  string? embedMessageTitle = null;
  string? embedMessageContent = null;

  protected override Task OnInitializedAsync() {
    if (TicketType is not null) {
      name = TicketType.Name;
      emoji = TicketType.Emoji;
      description = TicketType.Description;
      order = TicketType.Order;
      isEnabled = TicketType.IsEnabled;
      embedMessageTitle = TicketType.EmbedMessageTitle;
      embedMessageContent = TicketType.EmbedMessageContent;
    }

    return base.OnInitializedAsync();
  }

  private async Task SubmitAsync() {
    if (string.IsNullOrEmpty(name)) {
      notificationService.Notify(NotificationSeverity.Warning, "Warning", "Please enter a name.");
      return;
    }

    if (string.IsNullOrEmpty(description)) {
      notificationService.Notify(NotificationSeverity.Warning, "Warning", "Please enter a description.");
      return;
    }

    var dialogResult = await dialogService.Confirm("Are you sure you want to create new ticket type ?",
                                                   options: new ConfirmOptions() {
                                                     OkButtonText = "Yes",
                                                     CancelButtonText = "No",
                                                     CloseDialogOnOverlayClick = true,
                                                     CloseDialogOnEsc = true,
                                                   });
    if (dialogResult == true) {
      const string logMessage = $"[{nameof(CreateOrUpdateTicketTypeDialog)}]{nameof(SubmitAsync)}({{Name}})";
      try {
        if (isUpdate && TicketType is not null) {
          TicketType.Name = name;
          TicketType.Emoji = emoji;
          TicketType.Description = description;
          TicketType.Order = order;
          TicketType.EmbedMessageTitle = embedMessageTitle;
          TicketType.EmbedMessageContent = embedMessageContent;
          TicketType.IsEnabled = isEnabled;
          await TicketType.ProcessUpdateTicketTypeAsync();
          Log.Information(logMessage, name);
          notificationService.Notify(NotificationSeverity.Success, "Success", "Ticket Type updated successfully.");
          dialogService.Close(true);
        }
        else {
          await Entities.TicketType.ProcessCreateTicketTypeAsync(name,
                                                                 emoji,
                                                                 description,
                                                                 order,
                                                                 embedMessageTitle,
                                                                 embedMessageContent);
          Log.Information(logMessage, name);
          notificationService.Notify(NotificationSeverity.Success, "Success", "Ticket Type created successfully.");
          dialogService.Close(true);
        }
      }
      catch (BotExceptionBase ex) {
        Log.Warning(ex, logMessage, name);
        ex.NotifyException(notificationService);
      }
      catch (Exception ex) {
        Log.Fatal(ex, logMessage, name);
        ex.NotifyException(notificationService);
      }
    }
  }

}


<RadzenRow>
  <RadzenColumn>
    @if (isUpdate) {
      <RadzenRow class="rz-my-4">
        <RadzenSwitch Name="isEnabled" @bind-Value=@isEnabled/>
        <RadzenLabel Component="isEnabled">
          Is Enabled
        </RadzenLabel>
      </RadzenRow>
    }


    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Name" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="name" @bind-Value="@name"/>
      </RadzenFormField>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Emoji" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="Emoji" @bind-Value="@emoji"></RadzenTextBox>
      </RadzenFormField>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Description" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="Description" @bind-Value="@description"></RadzenTextBox>
      </RadzenFormField>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Order" class="w-100" Variant="Variant.Outlined">
        <RadzenNumeric Name="Order" @bind-Value="@order"></RadzenNumeric>
      </RadzenFormField>
    </RadzenRow>


    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Embed Message Title" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="embedMessageTitle" @bind-Value="@embedMessageTitle"></RadzenTextBox>
      </RadzenFormField>
    </RadzenRow>

    <RadzenRow class="rz-my-4">
      <RadzenFormField Text="Embed Message Content" class="w-100" Variant="Variant.Outlined">
        <RadzenTextBox Name="embedMessageContent" @bind-Value="@embedMessageContent"></RadzenTextBox>
      </RadzenFormField>
    </RadzenRow>


    <RadzenRow class="rz-my-4">
      <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Text="@(isUpdate ? "Update" : "Create")" Click="SubmitAsync"/>
    </RadzenRow>
  </RadzenColumn>
</RadzenRow>